(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    272514,       5638]
NotebookOptionsPosition[    269767,       5543]
NotebookOutlinePosition[    270152,       5559]
CellTagsIndexPosition[    270109,       5556]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["A Examples for Quantum Interval-valued Probability Measures", "Section",
 CellChangeTimes->{3.688786243042425*^9}],

Cell["\<\
http://mathematica.stackexchange.com/questions/16413/how-to-draw-a-great-\
circle-on-a-sphere\
\>", "Text",
 CellChangeTimes->{3.6768465566438527`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{"(*", 
   RowBox[{
   "Rotation", " ", "deg\[Degree]", " ", "out", " ", "of", " ", "the", " ", 
    "xy", " ", "plane"}], "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"rx", "=", 
     RowBox[{"RotationTransform", "[", 
      RowBox[{
       RowBox[{"deg", " ", "Degree"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"Spin", " ", "around", " ", "z", " ", "axis"}], "*)"}], 
    RowBox[{"rz", "=", 
     RowBox[{"RotationTransform", "[", 
      RowBox[{
       RowBox[{"\[Phi]", " ", "Degree"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", "v"}], "}"}], "=", 
     RowBox[{"rz", "@", 
      RowBox[{"rx", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]}]}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Graphics3D", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Opacity", "[", "0.4", "]"}], ",", 
             RowBox[{"Sphere", "[", "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Opacity", "[", "0.5", "]"}], ",", 
             RowBox[{"Polygon", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "1"}], ",", 
                  RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"-", "1"}], ",", "1", ",", "0"}], "}"}]}], "}"}], 
              "]"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "u"}], "}"}], 
              "]"}], ",", 
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "v"}], "}"}], 
              "]"}]}], "}"}]}], "}"}], "]"}], ",", 
        RowBox[{"ParametricPlot3D", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", "u"}], "+", 
             RowBox[{
              RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", "v"}]}], ",", 
            RowBox[{"(*", 
             RowBox[{
             "The", " ", "great", " ", "circle", " ", "in", " ", "question"}],
              "*)"}], 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Cos", "[", "\[Theta]", "]"}], ",", 
              RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", "0"}], "}"}], ",", 
            RowBox[{"(*", 
             RowBox[{"Normal", " ", "unit", " ", "circle"}], "*)"}], 
            RowBox[{
             RowBox[{"RotationTransform", "[", 
              RowBox[{"\[Theta]", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "]"}], "/@", 
             RowBox[{"{", 
              RowBox[{"u", ",", 
               RowBox[{"-", "u"}]}], "}"}]}]}], " ", 
           RowBox[{"(*", 
            RowBox[{"The", " ", "red", " ", "dashed", " ", "stuff"}], "*)"}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"\[Theta]", ",", 
            RowBox[{"-", "Pi"}], ",", "Pi"}], "}"}], ",", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Directive", "[", 
              RowBox[{"Blue", ",", "Thick"}], "]"}], ",", "Black", ",", 
             RowBox[{"Directive", "[", 
              RowBox[{"Red", ",", "Dashed"}], "]"}]}], "}"}]}]}], "]"}]}], 
       "}"}], ",", 
      RowBox[{"Axes", "\[Rule]", "True"}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]}]}], 
     "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"deg", ",", "15", ",", "\"\<Inclination\>\""}], "}"}], ",", 
     RowBox[{"-", "180"}], ",", "180"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Phi]", ",", "0", ",", "360"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.676846523128338*^9, 3.6768465231533384`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`deg$$ = 15, $CellContext`\[Phi]$$ = 0, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`deg$$], 15, "Inclination"}, -180, 180}, {
      Hold[$CellContext`\[Phi]$$], 0, 360}}, Typeset`size$$ = {
    360., {199., 203.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`deg$3682$$ = 
    0, $CellContext`\[Phi]$3683$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`deg$$ = 15, $CellContext`\[Phi]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`deg$$, $CellContext`deg$3682$$, 0], 
        Hold[$CellContext`\[Phi]$$, $CellContext`\[Phi]$3683$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`rx = 
        RotationTransform[$CellContext`deg$$ Degree, {0, 1, 
          0}]; $CellContext`rz = 
        RotationTransform[$CellContext`\[Phi]$$ Degree, {0, 0, 
          1}]; {$CellContext`u, $CellContext`v} = $CellContext`rz[
          $CellContext`rx[{{1, 0, 0}, {0, 1, 0}}]]; Show[{
          Graphics3D[{{
             Opacity[0.4], 
             Sphere[]}, {
             Opacity[0.5], 
             Polygon[{{-1, -1, 0}, {1, -1, 0}, {1, 1, 0}, {-1, 1, 0}}]}, {
             Arrow[{{0, 0, 0}, $CellContext`u}], 
             Arrow[{{0, 0, 0}, $CellContext`v}]}}], 
          
          ParametricPlot3D[{
           Cos[$CellContext`\[Theta]] $CellContext`u + 
            Sin[$CellContext`\[Theta]] $CellContext`v, {
             Cos[$CellContext`\[Theta]], 
             Sin[$CellContext`\[Theta]], 0}, 
            Map[
             
             RotationTransform[$CellContext`\[Theta], {0, 0, 
              1}], {$CellContext`u, -$CellContext`u}]}, \
{$CellContext`\[Theta], -Pi, Pi}, PlotStyle -> {
             Directive[Blue, Thick], Black, 
             Directive[Red, Dashed]}]}, Axes -> True, 
         AxesLabel -> {"x", "y", "z"}]), 
      "Specifications" :> {{{$CellContext`deg$$, 15, "Inclination"}, -180, 
         180}, {$CellContext`\[Phi]$$, 0, 360}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{407., {256., 263.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6768465254633737`*^9, 3.6768465608514175`*^9, 3.6768937917299557`*^9, 
   3.6769377615430403`*^9, 3.6769382316652613`*^9, 3.6769398311285133`*^9, 
   3.6769399857358885`*^9, 3.6769914097572017`*^9, 3.6769937763085513`*^9, 
   3.6769938436995864`*^9, 3.6771057099302797`*^9, {3.6771057904303923`*^9, 
   3.677105813770425*^9}, 3.677449677312496*^9, 3.677452930262554*^9, 
   3.68376303341041*^9, 3.683765093511241*^9, 3.683765727950529*^9, 
   3.6837671080064635`*^9, {3.683767145333599*^9, 3.6837671613975177`*^9}, 
   3.6837673273560095`*^9, 3.683767398939104*^9, 3.683768240482238*^9, 
   3.683768288942009*^9, 3.683768586023674*^9, 3.6887863283363037`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"orthoComplement", "[", "n_List", "]"}], ":=", 
  RowBox[{"Complement", "[", 
   RowBox[{
    RowBox[{"Orthogonalize", "[", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"IdentityMatrix", "[", "3", "]"}], ",", "n"}], "]"}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "0"}], "}"}], "}"}], ",", 
    RowBox[{"Orthogonalize", "[", 
     RowBox[{"{", "n", "}"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"orthoComplement", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "0", ",", "0"}], "}"}], "]"}]}], "Input",
 CellChangeTimes->{{3.676849228037901*^9, 3.6768493044940753`*^9}, {
  3.67684944544374*^9, 3.6768494522388444`*^9}, {3.6768495950835385`*^9, 
  3.676849601166132*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.676849602061146*^9, 3.676893792154962*^9, 3.6769377623280525`*^9, 
   3.6769382323252716`*^9, 3.6769398317435226`*^9, 3.676939985993392*^9, 
   3.6769914103997116`*^9, 3.67699377686856*^9, 3.676993844259595*^9, 
   3.6771057103802805`*^9, {3.6771057905203924`*^9, 3.677105814190426*^9}, 
   3.6774496777895236`*^9, 3.677452930829587*^9, 3.683763033898438*^9, 
   3.6837650940582724`*^9, 3.683765728531562*^9, 3.683767108324482*^9, {
   3.6837671456496167`*^9, 3.6837671617135353`*^9}, 3.683767327918042*^9, 
   3.683767399483135*^9, 3.6837682410442696`*^9, 3.6837682895010414`*^9, 
   3.683768586581706*^9, 3.6887863288133307`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"text", "[", 
   RowBox[{"t_", ",", "\[Psi]_"}], "]"}], ":=", 
  RowBox[{"Text", "[", 
   RowBox[{"t", ",", "\[Psi]", ",", 
    RowBox[{"FormatType", "\[Rule]", "TraditionalForm"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"graphicNormalOrthoComplement", "[", 
   RowBox[{
   "\[Psi]_List", ",", "u1_List", ",", "u2_List", ",", "c_RGBColor", ",", 
    "t_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", "=", 
      RowBox[{"orthoComplement", "[", "\[Psi]", "]"}]}], "}"}], ",", 
    RowBox[{"Show", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{"c", ",", "Dotted", ",", 
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "\[Psi]"}], 
            "}"}], "]"}], ",", 
          RowBox[{"text", "[", 
           RowBox[{"t", ",", 
            RowBox[{"1.1", "\[Psi]"}]}], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"ParametricPlot3D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"-", "#"}]}], "}"}], "&"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", "u1"}], "+", 
           RowBox[{
            RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", "u2"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"\[Theta]", ",", "0", ",", 
           FractionBox["\[Pi]", "2"]}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "c"}]}], "]"}], ",", 
       RowBox[{"ParametricPlot3D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"-", "#"}]}], "}"}], "&"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", "u1"}], "+", 
           RowBox[{
            RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", "u2"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"\[Theta]", ",", 
           FractionBox["\[Pi]", "2"], ",", "\[Pi]"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"c", ",", "Dotted"}], "}"}]}]}], "]"}]}], "}"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"graphicNormalOrthoComplement", "[", 
   RowBox[{"\[Psi]_List", ",", "u1_List", ",", "u2_List", ",", "c_RGBColor"}],
    "]"}], ":=", 
  RowBox[{"graphicNormalOrthoComplement", "[", 
   RowBox[{"\[Psi]", ",", "u1", ",", "u2", ",", "c", ",", "\"\<\>\""}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"graphicNormalOrthoComplement", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "Blue", ",", 
   "\"\<\[LeftBracketingBar]0\[RightAngleBracket]\>\""}], "]"}]}], "Input",
 CellChangeTimes->{{3.6768494579639325`*^9, 3.6768494687715983`*^9}, {
   3.6768495010070934`*^9, 3.6768497821589117`*^9}, {3.67684990183575*^9, 
   3.676849909550869*^9}, {3.6768499457939253`*^9, 3.6768500140999746`*^9}, 
   3.6768514361318316`*^9, {3.676852165033027*^9, 3.6768521780082264`*^9}, {
   3.676939607377577*^9, 3.676939626590372*^9}, {3.6769397821352606`*^9, 
   3.6769397837827864`*^9}, {3.677449789928938*^9, 3.6774498341464663`*^9}, {
   3.677449898319137*^9, 3.677449959364629*^9}, {3.6774500531629934`*^9, 
   3.6774501443012066`*^9}, {3.6774502670052247`*^9, 
   3.6774503964796305`*^9}, {3.6774528986517467`*^9, 
   3.6774528990327682`*^9}, {3.6837635532911453`*^9, 
   3.6837635730162735`*^9}, {3.683763711753209*^9, 3.6837637146573753`*^9}, {
   3.683763786098461*^9, 3.6837638689932027`*^9}, {3.6837639381721597`*^9, 
   3.6837639816346455`*^9}, {3.6837640897928314`*^9, 
   3.6837641016055074`*^9}, {3.6837641652351465`*^9, 3.683764209488678*^9}, {
   3.6837645217425375`*^9, 3.6837645430687575`*^9}, {3.6837646688229504`*^9, 
   3.683764706790122*^9}, {3.6837647557369213`*^9, 3.6837647891658335`*^9}, {
   3.6837649371943007`*^9, 3.683764954999319*^9}, {3.68376517724103*^9, 
   3.683765177963072*^9}, {3.6837658334795647`*^9, 3.6837658916418915`*^9}, {
   3.6837671344389753`*^9, 3.6837671528590293`*^9}, {3.6837673176594553`*^9, 
   3.6837673182394886`*^9}, {3.6837673883815002`*^9, 3.6837673885805116`*^9}, 
   3.6837676806512175`*^9, {3.683767830581793*^9, 3.6837678308968105`*^9}}],

Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[0, 0, 1], Dashing[{0, Small}], 
    Arrow3DBox[{{0, 0, 0}, {1, 0, 0}}], 
    Text3DBox["\<\"\[LeftBracketingBar]0\[RightAngleBracket]\"\>", {1.1, 0., 
     0.},
     FormatType->TraditionalForm]}, {{}, {}, 
    {RGBColor[0, 0, 1], AbsoluteThickness[2], Line3DBox[CompressedData["
1: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
4LpQsk5wNbXo/3Lwj1z8fzZ6+GA=
      "]], Line3DBox[CompressedData["
1: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
HUhwWSzZILiKSvR/OfhHLv4/6CZvbw==
      "]]}}, {{}, {}, 
    {RGBColor[0, 0, 1], AbsoluteThickness[2], Dashing[{0, Small}], 
     Line3DBox[CompressedData["
1:eJxN1ns4ldkeB3ATyZx0cskllxQzOk1JhTFncokQRooSuQ6KSBGlXGZvJkVT
7qRjxA7lEjZCmR0/ik0NuYvkuEb23rwkctmYd57znLXe9TzvP59nPc+73t9v
rfV+d7j5Wp9dJyAgcJV8BAXwePPGv3lEy7V6ee3vQej/35XPHdq5LVEf9mcW
11LdZkFbojfhGEQ2soWp/qcyYS5eZAtdVwxbVihuezm6uDzBBXqKVOT5FD/h
c7+5gOUOGsHenEWKl6cqBq4WesKFQWndLxTPPqqcxUjwBck8hs80xU+5Xom4
9uISfK1KM+NRnGl+wJ/BCgDCvzZvnOLyu4JdiMKrEMgO+vye4le1t+VHJdBh
6eWT0lqKO4hYT3XXh8FT5Rf5lRSXsTc28XoRDuHS2qolFNcxGVCOZl0H9mGb
nHTqerYfU2krjIS9zR7tARQ/tCd11CQhFmYT1zcJU3zG7VOz15E4qPoctzS/
ir3HWZPDrI+D3MEbBWMU/5w+4HjwRTzUnC5MraP4qLzonCUrEYR+XMoIpnh7
YqShZ2EK7NVotmxZwc4fYAxaxmfAzhsN+vJ87AMp995JbmLAbq07BxaXsT8p
Or9Mt2JA8Mh0QjfF+5TfONi+Y8DZp2lpsRTn1xpdWcd7AKtacR1LS9gX/dYt
mm7OBsdpWmv5IqX+Bs5lMTa5EFLXsLF6HjvkNho6+hVDnd7aHzIE9jl7U0cN
z2dQpsPeVPoOe6nyA5qkbA1kzKY08quxD0rNp6Rb1EFk7yWVk/ewF6iXNqpp
NgLTaAdXywe7t1WYTtG5Jph2LrnO1MC+3fcfra8PtQLbP8TQd3YK+cudqnLE
t+3AmUkWrWZi/1QWRRNW7wT+7YScWSfsdmKBp63FumH1n/qbm77GHp45WfN2
+C3IhH7/i3jxJPKkrZdr4rt7wUJsD7PCBLu8ktrLk5l9MABMUYF+HnIR8xyP
zdH9YCS8ryXADfvyI0IswWMAcgab6n4Y5iKXkpW/qHZnENTWjv5Y5I59fWHa
xwn/IbD+7meblXYOctM97N4O42FYeRiuK22M3YmQ5Jp8OwK3Mx+NC2VPILfw
dGUbLY+ARWkLO2/1I66DeeC1oapRsNsuEaDgjF0gM/yI+u0PcPvcXr5D3jjy
Cb73K2vjMWhj/2ZDXxpDrvCV7KsL82PgZpOdH2GG/RW/oseueBzELddvDrv+
AdfZ1H6ky/YjVIfIZOjVj+LzHnozPV14AopSN3ZazIwgP6/WFa35eAKiftX2
yJLHnlxzRP2oHgfmNz40iT82jLzS2mgop5sD5tcSG40vDOF9G64yLeDMhTqT
eKPY5EHkHpcVaYrvuSAd1z/3Q+gA8uc/bToT6MSDozNBYRqMfuQ3bCcX+G94
MB6zvzTxfR9yYTmRWCXDSYg++IVlw+1FrtS+X1fi0STMqT1MO7alB7ni7pKC
AYEpuGOZbVh0qBu77ILsvx2moJzjJ3devxPvE94TZmvOFIh6yWdpO7Tj72rd
MGzxaQo8Tx886GPWinxdv+Yt1gECuktSaOeCmpC/9S0QXedJQIfD/TCzjEbk
hx097sikEKD4XwOe9fk65N+rm9a8ZxFA26bz1a2gGuRc9ibVwz0EZGh/VNRT
r0TO6Ur+HDxFQK2WVWAbqxj5Lv4pznPS1/xspXTSsJ/9RsV9lXRJEeeAR6HY
uSE9/XSCgNQC+4vButjHK3//EjpNgIiXWp8ejYl8/qcilssnAoS+i1piRRTi
c8StoDfMke/dMHnDNT4PueqMaNci6VEdyu7/ssYe8ciqcPc8AcOzhv1TEtiZ
W7LHokknupQKgpNykdftsAu1+ELAwIRDS3RKDvKTTo4apQsERFv9LJR1/yFy
Wonmn0rL5PzOBV5s3gPk0klDv5iQfmW7ftm0G3au4O9JPqTPuVepWilgd8zZ
N1VBupfdSwnxWAa+/z07rIz4BMiN65+Wm0hHLvnB/Z3BCgGVITO7CFoqcveN
t5qdST8T4+yWM/Mf5FWRxd+EkB4kZqbgcgZ7taPQWgnp5tvtlZrN7iF/LFXi
LrtK1lOmoTBry128P/3KeQ2k177ONdHNj8d9L65X6iP9dchQ75QC9uMb2iom
SX8WkbOVERuH78/Et2LiawScLtU/IciJQZ67mHr5OOlWPL3CX+m/IT9QEtzg
TLpUjIHG0JlbyHVXrWk+pEdL+unqm0chNzvOk7lJekxy7+zilpvIhfRZS2T+
AOPANLp3fjju44LdBRbpHbueV9XHhiEvuT55uI70URmNUwYcGj53Z5cUOkmn
N+yxfkwPxvehr79SH+mlNZ+jXMyv4dxVPHhjiHSLfeZmklKByBlOGTQyh0Fm
ETM+KP8S8rtJhNgM6WF/xDvbcS7ivJeitWHu7/VHCgpW0b1xv05ccl0gPZCr
q7pDygP/Z59lKi2T7iP1uj8i3xV52dNXBmTuhK0ObrRWuj3ytSNjDauks1kL
cDffCnmi60IJmV+hy6PjVGW+Ae7j/3IwuLnJtZG5WO8vmLU4EQ==
      "]], Line3DBox[CompressedData["
1:eJxN1ns4ldkeB3CDZE46uSRySWlGpympZMyZ8IsQRsouuaZBESmilMvszUQ0
5U46RuyQjbBt6WJ2RGlTQ0REctyK7L3tl1xy2THvPOc5a73red5/Ps96nne9
v99a6/1u8AygnZCUkJC4QD5SEni8fBnUPGTgYbKw9PcgHv/ftU/u2bQuFWBH
bnkd1R1mDRW7Uw5AbCNPhup/ahM2CmWO0HHerOULxR3PxZffSzkGXWUb1cUU
P+R/s7mE6wX6YX78OYrfy9QMWSz1gdP9a4w/Uzx/v3YeMyUAlIqY/uMUP+Jx
Pvrik7PwtQ7dWkhxts3OICY3GIiguqIRiqtvDjtGlF6AEF7o1DuKXzBcVxyX
woD5p3cr6ijuKksTdT6LhAfaT4qrKK7iYmHp+yQKotYY6nAobmTZpx3PvQS8
vQ6sbOp61h/Y+Ko0FrY1e7cFU3zP1sz3limJMJm6rEmG4hOen5p99yVB9VTS
/Mwi9i73XXz2syQo7I8pGab4VHaf2+4nyVDrXJpZT/H36nLTdtxUkP5xPieM
4m2psWY+pRmwTb/ZruULdnEfs98uOQc2xTSAuhh7X8aNt0ormbDF4NrOuQXs
d8tOLTDsmRA2NJ7SSfEe7Zeujm+ZcOJBVlYixcV15uclhbdg0SCpfX4e+1yg
5JzVqnxwG6e33puj1N/UvTLBoRDC6xtW1Mxgf1zYaOYWWA71Jkt/qBDYp12s
3PR9HkKlEW9lxVvsFdq36EqqtZAzmdEorsHerzyTkW1bD7HdZzcevoG9RK+i
UXdXI7DNNwgM/LH72UcalZ1sgnF3ziW2Pvb1Af9ofbGnFXhB4WYBkyLkTzfp
qBHftgF/Il2uho39U2UcXUbvNYivprAmj2J3kg9xpsl3wuI/YVXT19ijcsdq
3wy+AZWI739RKB9Dnrb2XG1yZzfYym9l37fErq6l+/Rwbg/0PWbLSfQKkcva
sLxXxfeCucz2lmBP7AsFhHyKdx+w+pvqfxgUIFdWVT+je60fdJf2/1jmhX1Z
adbH0aABoH33s8OXNj5yq6287naLQfhyO8p4jQX2o4SSwPLbIbiaWzAinT+K
3NbHg2e+MAS2FS28osWPuA42IRcHqt+D03rFYA137BK5Ufv0rn6Aqye3iV2L
RpCPiv2e0yyG4RXvNwfG/DByja9Un5+eGQZPh/ziaGvsz8X3u5zKR0DBbtmq
yEsfcJ2tXIY6HD9CTbhKjsmz9/i8R1zOzpYZhbLMFa9tJ4aQn9LtiN91ZxTi
fjX0zlPHnl67T2+/CR9mVty2TD4wiLyKZj7A6uSDzcXURovTA3jfRm0cl3AX
QL1lsnliej9y73OadM13AliT1Dv9Q0Qf8kc/rTweclQI+ydCI/WZvchjHMdm
xS+FMJKwoyL1XQ9yGTXZRC2zMYjf/ZnrIOhGrtW2w1ixYAymdW9nHVjdhVxz
C6ekT0IE1+zyzcr2dGJXnVX9t6sI7vED1U7Ba7xPhHfZrSwRyPmq5xm6tuHv
al0+aPtJBD7Ou3f7W7cil+zddYW7k4BOTgb9ZGgT8jcBJXKSPgS0u96MtM5p
RL7XzfuaSgYBmv81FdJO1SP/Xs+q9h2XAPo6o6+uhNYiF/BW6uztIiDH8KOm
iV4Vcn5H+lSYiIA6A/uQV9xy5JvFR/iPSF8KdFQ2ysJ+4puNXoukK8m6BxdE
YBeEd/UyCAIyS1zOhBljH6n6/XPEOAGyvro9JnQ28pmfyrjHPhEg/V3cPDe6
FJ8jwX1GwzT53uVjMR7JRch1JuQ65kiPa9f2+hcNe3SBfemWGQIGJ816RYrY
2avzh+NJJzq0SsLSCpHXb3CKsP1MQN+oa0t8Bgv54aNu+hWzBMTb/yydd/M2
cjpn159aC+T817PCxKJbyNekDfxiSfr59VA57oldIPV7mj/p017VOvYa2N1Y
20X3Sfd1eqqokMjE979Pu725mAC1EXBWG81GrvTB663pFwKqwic2E/RM5F4r
rjS7k348wd2TNfEf5NWx5d+Ekx4qb61x7Dj2GjfpJQ7pNutdtJqtbyC/o8zx
Ul0k66nSUJq3+jren4H3hA2k170otDQuTsZ9L3+m1UP6i/CBbpEG9oPLX90f
I/1hNGstMzEJ35+pb+QVlghwroBDUvwE5IVzmecOkm4vNCn9lfEb8p2csAZ3
0pUTTPUHjl9BbrxIo/uTHq8UaAw2ccitDwpVLpOekN49Obf6MnJp4M6T+QMs
QrIYfsVRuI+zTqe5pLdvflT9LDESOefS2N560t+r6B8x5dPxuTsxr/GadEbD
VtodRhi+DwOCtHpIr6idijtmcxHnrvL+mAHSbbfbWCsphyBnHs2hkzkMcsvY
yaHFZ5FfTyPkJ0iP/CPZ3Yl/Bue9DIPl03+vP1ZKqprhh/t16KzHLOkhAmOd
Dcre+D/7MFdrgXR/5Re90cUeyCsfPDclcyesdfWktzJckC/tG25YJJ3HnX18
vdgeearHLIfMr9Dh3X6kqtgU9/F/ORg8PdVekbm45i+8lzgR
      "]]}}}]], "Output",
 CellChangeTimes->{{3.683764201291209*^9, 3.6837642178821583`*^9}, {
   3.6837645266618195`*^9, 3.683764544077815*^9}, {3.683764689504133*^9, 
   3.6837647078461823`*^9}, 3.683764761077227*^9, 3.6837647912439528`*^9, 
   3.6837650941082754`*^9, 3.683765728579565*^9, 3.683767108385485*^9, {
   3.68376714570662*^9, 3.68376716179254*^9}, 3.6837673279620447`*^9, 
   3.683767399525138*^9, 3.6837682410892725`*^9, 3.683768289547044*^9, 
   3.6837685866297083`*^9, 3.6887863288573337`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"graphicNormalOrthoComplement", "[", 
   RowBox[{"\[Psi]_List", ",", "c_RGBColor"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", "=", 
      RowBox[{"orthoComplement", "[", "\[Psi]", "]"}]}], "}"}], ",", 
    RowBox[{"Show", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Graphics3D", "[", 
        RowBox[{"{", 
         RowBox[{"c", ",", "Dotted", ",", 
          RowBox[{"Arrow", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "\[Psi]"}], 
            "}"}], "]"}]}], "}"}], "]"}], ",", 
       RowBox[{"ParametricPlot3D", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Cos", "[", "\[Theta]", "]"}], " ", 
           RowBox[{
           "u", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], "+", 
          RowBox[{
           RowBox[{"Sin", "[", "\[Theta]", "]"}], " ", 
           RowBox[{
           "u", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"\[Theta]", ",", 
           RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", "c"}]}], "]"}]}], "}"}], "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"graphicNormalOrthoComplement", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "Blue"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6768494579639325`*^9, 3.6768494687715983`*^9}, {
   3.6768495010070934`*^9, 3.6768497821589117`*^9}, {3.67684990183575*^9, 
   3.676849909550869*^9}, {3.6768499457939253`*^9, 3.6768500140999746`*^9}, 
   3.6768514361318316`*^9, {3.676852165033027*^9, 3.6768521780082264`*^9}, {
   3.676939607377577*^9, 3.676939626590372*^9}, {3.6769397821352606`*^9, 
   3.6769397837827864`*^9}, {3.677450037207081*^9, 3.6774500403112583`*^9}, {
   3.6774529122625246`*^9, 3.6774529136866064`*^9}, {3.683763586303034*^9, 
   3.6837635963836107`*^9}, {3.68376496131668*^9, 3.6837649687041025`*^9}}],

Cell[BoxData[
 Graphics3DBox[{
   {RGBColor[0, 0, 1], Dashing[{0, Small}], 
    Arrow3DBox[{{0, 0, 0}, {1, 0, 0}}]}, {{}, {}, 
    {RGBColor[0, 0, 1], AbsoluteThickness[2], Line3DBox[CompressedData["
1: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
wE+pZ/y/Sf7/e3a5/+3Z/w8Btbmj
      "]]}}}]], "Output",
 CellChangeTimes->{
  3.6768497196304517`*^9, {3.6768497549384937`*^9, 3.6768497836864357`*^9}, 
   3.6768499107483873`*^9, 3.67684994997149*^9, {3.676849995499689*^9, 
   3.6768500158875017`*^9}, 3.67685143799186*^9, 3.6768521810732737`*^9, 
   3.6768937921824627`*^9, 3.6769377623555527`*^9, 3.6769382323527718`*^9, 
   3.6769398317710233`*^9, 3.6769399860233927`*^9, 3.676991410432212*^9, 
   3.6769937768985605`*^9, 3.676993844287095*^9, 3.67710571041028*^9, {
   3.677105790620393*^9, 3.6771058142204256`*^9}, 3.6774496778135247`*^9, 
   3.677450446557494*^9, {3.6774529165547705`*^9, 3.6774529309065914`*^9}, 
   3.6837630339584417`*^9, 3.6837650941612787`*^9, 3.683765728635568*^9, 
   3.6837671084134865`*^9, {3.683767145758623*^9, 3.683767161845543*^9}, 
   3.683767328017048*^9, 3.683767399582141*^9, 3.683768241120274*^9, 
   3.6837682895740457`*^9, 3.6837685866617107`*^9, 3.6887863288913355`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"styleMatrix", "[", 
   RowBox[{"\[Psi]_List", ",", "c_RGBColor"}], "]"}], ":=", 
  RowBox[{"Style", "[", 
   RowBox[{
    RowBox[{"MatrixForm", "[", "\[Psi]", "]"}], ",", "c"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"styleMatrix", "[", 
   RowBox[{"\[Psi]_List", ",", "c_RGBColor", ",", "t_"}], "]"}], ":=", 
  RowBox[{"styleMatrix", "[", 
   RowBox[{"\[Psi]", ",", "c"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"outputCircles", "[", "\[Psi]s_List", "]"}], ":=", " ", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Psi]sNormalized", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Prepend", "[", 
          RowBox[{
           RowBox[{"Rest", "[", "#", "]"}], ",", 
           RowBox[{"Normalize", "[", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
            "]"}]}], "]"}], "&"}], "/@", "\[Psi]s"}]}], ",", 
      RowBox[{"prePrint", "=", 
       RowBox[{"{", "}"}]}], ",", 
      RowBox[{"\[Phi]s", "=", 
       RowBox[{"{", "}"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[Phi]", "=", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{
               RowBox[{"\[Psi]s1", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
               "\[Cross]", 
               RowBox[{"\[Psi]s1", "\[LeftDoubleBracket]", 
                RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}], 
             ",", 
             RowBox[{"Blend", "[", 
              RowBox[{
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                "&"}], "/@", "\[Psi]s1"}], "]"}]}], "}"}]}], "}"}], ",", 
         RowBox[{
          RowBox[{"AppendTo", "[", 
           RowBox[{"prePrint", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"styleMatrix", "@@", 
                RowBox[{
                "\[Psi]s1", "\[LeftDoubleBracket]", "1", 
                 "\[RightDoubleBracket]"}]}], ")"}], "\[Cross]", 
              RowBox[{"(", 
               RowBox[{"styleMatrix", "@@", 
                RowBox[{
                "\[Psi]s1", "\[LeftDoubleBracket]", "2", 
                 "\[RightDoubleBracket]"}]}], ")"}]}], "\[Equal]", 
             RowBox[{"styleMatrix", "[", "\[Phi]", "]"}]}]}], "]"}], ";", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"\[Phi]s", ",", "\[Phi]"}], "]"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\[Psi]s1", ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{"\[Psi]sNormalized", ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"prePrint", ",", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "\[Phi]s", "]"}], "\[Equal]", "1"}], ",", 
            RowBox[{
             RowBox[{"graphicNormalOrthoComplement", "[", 
              RowBox[{
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
               ",", 
               RowBox[{"\[Phi]s", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
               RowBox[{"Normalize", "[", 
                RowBox[{
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                 "\[Cross]", 
                 RowBox[{"\[Phi]s", "\[LeftDoubleBracket]", 
                  RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}]}], "]"}],
                ",", 
               RowBox[{"Sequence", "@@", 
                RowBox[{"Rest", "[", "#", "]"}]}]}], "]"}], "&"}], ",", 
            RowBox[{
             RowBox[{"graphicNormalOrthoComplement", "@@", "#"}], "&"}]}], 
           "]"}], "/@", "\[Psi]sNormalized"}], ",", 
         RowBox[{"Graphics3D", "[", 
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Opacity", "[", "0.4", "]"}], ",", 
               RowBox[{"Sphere", "[", "]"}]}], "}"}], ",", 
             RowBox[{"Table", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "\[Phi]", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}], ",", 
                 RowBox[{"Line", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    "\[Phi]", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{
                    "\[Phi]", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}]}], "}"}], "]"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"\[Phi]", ",", "\[Phi]s"}], "}"}]}], "]"}]}], "}"}], 
           "]"}], "]"}]}], "]"}]}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"showCircles", "[", "\[Psi]s_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"o", "=", 
      RowBox[{"outputCircles", "[", "\[Psi]s", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"o", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
      "]"}], ";", 
     RowBox[{"Show", "[", 
      RowBox[{"o", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
      "]"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.6768498034267387`*^9, 3.6768498799854145`*^9}, {
   3.6768510963971124`*^9, 3.676851109012306*^9}, {3.6768511400977836`*^9, 
   3.67685126552221*^9}, {3.6768512986872206`*^9, 3.676851397446237*^9}, {
   3.6768514718623805`*^9, 3.6768516098745003`*^9}, {3.676851640082464*^9, 
   3.6768516592452583`*^9}, {3.6768518294178724`*^9, 
   3.6768520829617667`*^9}, {3.6768521144472504`*^9, 3.676852132447527*^9}, {
   3.67685218670836*^9, 3.6768522108162303`*^9}, 3.676852252169366*^9, {
   3.67685228824992*^9, 3.6768523276355247`*^9}, {3.676854524934492*^9, 
   3.676854888875082*^9}, {3.676893764094531*^9, 3.676893784804849*^9}, {
   3.6768939247644987`*^9, 3.676893933689636*^9}, {3.6768942425143795`*^9, 
   3.6768943034278154`*^9}, {3.676894334533293*^9, 3.676894382064023*^9}, 
   3.6768944555676517`*^9, {3.676894487688145*^9, 3.6768945435615034`*^9}, {
   3.6768949539053063`*^9, 3.6768950215538454`*^9}, {3.6769364100297813`*^9, 
   3.676936548854414*^9}, {3.6769367323447323`*^9, 3.676936758950141*^9}, {
   3.6769368493315287`*^9, 3.6769369125600004`*^9}, {3.676936987673654*^9, 
   3.6769370617872925`*^9}, 3.6769370978328457`*^9, {3.6769371566587496`*^9, 
   3.6769371629688463`*^9}, {3.6769372135771236`*^9, 3.6769372143496356`*^9}, 
   3.6769372894807897`*^9, {3.6769374663010054`*^9, 3.676937596490505*^9}, {
   3.6769376654990654`*^9, 3.6769376926119814`*^9}, {3.6769377858184133`*^9, 
   3.6769377962860737`*^9}, {3.6769379528809795`*^9, 3.6769381446789255`*^9}, 
   3.676939632470462*^9, {3.6769396855987782`*^9, 3.6769397440971766`*^9}, {
   3.6769398740141726`*^9, 3.6769398959570093`*^9}, {3.6769935252171946`*^9, 
   3.676993646486557*^9}, {3.6769938290243607`*^9, 3.676993831624401*^9}, {
   3.6774518437864113`*^9, 3.6774518704439363`*^9}, {3.677451958543975*^9, 
   3.677451996151126*^9}, {3.6774520535374084`*^9, 3.6774522557359734`*^9}, {
   3.683763602754975*^9, 3.6837636062901773`*^9}, {3.6837649733783703`*^9, 
   3.6837650552260513`*^9}, {3.683765217821351*^9, 3.683765218407385*^9}, {
   3.6837652662291203`*^9, 3.6837652873903303`*^9}, {3.6837654618193073`*^9, 
   3.6837654857206745`*^9}, {3.683765561272996*^9, 3.6837655678383713`*^9}, {
   3.6837656486229916`*^9, 3.6837656813638644`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Cross]", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6774524064405937`*^9, 3.6774524152360964`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{
  3.6774524161241474`*^9, 3.677452930951594*^9, 3.6837630339764423`*^9, 
   3.6837650941962805`*^9, 3.6837657286975718`*^9, 3.6837671084534893`*^9, {
   3.6837671458036256`*^9, 3.6837671618695445`*^9}, 3.683767328041049*^9, 
   3.683767399606142*^9, 3.683768241168277*^9, 3.683768289621048*^9, 
   3.683768586704713*^9, 3.6887863289143367`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Show", "[", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Epsilon]", "=", "0"}], ",", 
        RowBox[{"\[Psi]", "=", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           RowBox[{"Sin", "[", "\[Theta]", "]"}], ",", 
           RowBox[{"Cos", "[", "\[Theta]", "]"}]}], "}"}]}], ",", 
        RowBox[{"at", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\[Psi]", ",", "t"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "\[Psi]"}], 
               "}"}], "]"}], ",", 
             RowBox[{"text", "[", 
              RowBox[{"t", ",", 
               RowBox[{"1.1", "\[Psi]"}]}], "]"}]}], "}"}]}], "]"}]}], ",", 
        RowBox[{"atc", "=", 
         RowBox[{"Function", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\[Psi]", ",", "t", ",", "c"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"c", ",", 
             RowBox[{"Arrow", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", "\[Psi]"}], 
               "}"}], "]"}], ",", 
             RowBox[{"text", "[", 
              RowBox[{"t", ",", 
               RowBox[{"1.4", "\[Psi]"}]}], "]"}]}], "}"}]}], "]"}]}]}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Show", "[", 
         RowBox[{
          RowBox[{"outputCircles", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", "Red", ",", 
               "\"\<\[LeftBracketingBar]0\[RightAngleBracket]\>\""}], "}"}], 
             ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"1", "-", "\[Epsilon]"}], ",", "0"}], "}"}], ",", 
               "Green", ",", 
               "\"\<\[LeftBracketingBar]+\[RightAngleBracket]\>\""}], "}"}]}],
             "}"}], "]"}], "\[LeftDoubleBracket]", "2", 
          "\[RightDoubleBracket]"}], "]"}], ",", 
        RowBox[{"Graphics3D", "[", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"at", "[", 
            RowBox[{
            "\[Psi]", ",", 
             "\"\<\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\
\[Theta], \[Gamma]\), \(\[UpTee]\)]\)\[RightAngleBracket]\>\""}], "]"}], ",", 
           RowBox[{"atc", "[", 
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "0", ",", "0"}], "}"}], "\[Cross]", 
               "\[Psi]"}], "]"}], ",", 
             "\"\<\[LeftBracketingBar]0\[RightAngleBracket]\[Cross]\
\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\[Theta], \[Gamma]\), \(\
\[UpTee]\)]\)\[RightAngleBracket]\>\"", ",", "Red"}], "]"}], ",", 
           RowBox[{"atc", "[", 
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"1", "-", "\[Epsilon]"}], ",", "0"}], "}"}], 
               "\[Cross]", "\[Psi]"}], "]"}], ",", 
             "\"\<\[LeftBracketingBar]+\[RightAngleBracket]\[Cross]\
\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\[Theta], \[Gamma]\), \(\
\[UpTee]\)]\)\[RightAngleBracket]\>\"", ",", "Green"}], "]"}]}], "]"}], 
         "]"}]}], "}"}]}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Theta]", ",", "0", ",", 
     FractionBox["\[Pi]", "2"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.67693815409157*^9, 3.6769381854120507`*^9}, {
   3.67699151706635*^9, 3.676991615140356*^9}, {3.676991738897257*^9, 
   3.676991744237339*^9}, {3.6769918925696173`*^9, 3.676991895777167*^9}, {
   3.6769919266626415`*^9, 3.6769921009153175`*^9}, {3.6769921628137684`*^9, 
   3.6769921762614746`*^9}, 3.6769922073394523`*^9, {3.676992275295496*^9, 
   3.6769922931732707`*^9}, {3.6769934975642695`*^9, 3.676993503194356*^9}, {
   3.6769936586892443`*^9, 3.6769936829196167`*^9}, {3.6769939603063774`*^9, 
   3.6769939841592436`*^9}, {3.6769940220848265`*^9, 
   3.6769940241723585`*^9}, {3.677105739330321*^9, 3.677105754500342*^9}, {
   3.6837632240333133`*^9, 3.683763247559659*^9}, {3.683765718490988*^9, 
   3.683765750294807*^9}, {3.6837658015417385`*^9, 3.683765815242522*^9}, {
   3.6837659113290176`*^9, 3.6837659426068068`*^9}, {3.6837663762876115`*^9, 
   3.683766377203664*^9}, {3.683766425142406*^9, 3.683766467368821*^9}, 
   3.6837665252831335`*^9, 3.6837666059037447`*^9, {3.683766684998269*^9, 
   3.68376684918666*^9}, {3.6837668818535285`*^9, 3.683767044682842*^9}, {
   3.6837670812219315`*^9, 3.683767097814881*^9}, {3.6837676864375477`*^9, 
   3.6837676870335817`*^9}, {3.6837678552282023`*^9, 
   3.6837678640387063`*^9}, {3.6837681366102962`*^9, 3.6837682286935635`*^9}, 
   3.68376826202847*^9, {3.683768305406951*^9, 3.6837683057669716`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Theta]$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Theta]$$], 0, Rational[1, 2] Pi}}, 
    Typeset`size$$ = {360., {195., 199.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`\[Theta]$4298$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`\[Theta]$$ = 0}, 
      "ControllerVariables" :> {
        Hold[$CellContext`\[Theta]$$, $CellContext`\[Theta]$4298$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Show[
        With[{$CellContext`\[Epsilon] = 0, $CellContext`\[Psi] = {0, 
            Sin[$CellContext`\[Theta]$$], 
            Cos[$CellContext`\[Theta]$$]}, $CellContext`at = 
          Function[{$CellContext`\[Psi], $CellContext`t}, {
             Arrow[{{0, 0, 0}, $CellContext`\[Psi]}], 
             $CellContext`text[$CellContext`t, 
              1.1 $CellContext`\[Psi]]}], $CellContext`atc = 
          Function[{$CellContext`\[Psi], $CellContext`t, $CellContext`c}, \
{$CellContext`c, 
             Arrow[{{0, 0, 0}, $CellContext`\[Psi]}], 
             $CellContext`text[$CellContext`t, 1.4 $CellContext`\[Psi]]}]}, {
          Show[
           Part[
            $CellContext`outputCircles[{{{1, 0, 0}, Red, 
               "\[LeftBracketingBar]0\[RightAngleBracket]"}, {{
               1, 1 - $CellContext`\[Epsilon], 0}, Green, 
               "\[LeftBracketingBar]+\[RightAngleBracket]"}}], 2]], 
          Graphics3D[
           Join[
            $CellContext`at[$CellContext`\[Psi], 
             
             "\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\[Theta], \
\[Gamma]\), \(\[UpTee]\)]\)\[RightAngleBracket]"], 
            $CellContext`atc[
             Normalize[
              Cross[{1, 0, 0}, $CellContext`\[Psi]]], 
             "\[LeftBracketingBar]0\[RightAngleBracket]\[Cross]\
\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\[Theta], \[Gamma]\), \(\
\[UpTee]\)]\)\[RightAngleBracket]", Red], 
            $CellContext`atc[
             Normalize[
              
              Cross[{1, 1 - $CellContext`\[Epsilon], 
                0}, $CellContext`\[Psi]]], 
             "\[LeftBracketingBar]+\[RightAngleBracket]\[Cross]\
\[LeftBracketingBar]\!\(\*SubsuperscriptBox[\(0\), \(\[Theta], \[Gamma]\), \(\
\[UpTee]\)]\)\[RightAngleBracket]", Green]]]}]], 
      "Specifications" :> {{$CellContext`\[Theta]$$, 0, Rational[1, 2] Pi}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{407., {238., 245.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6769381648492355`*^9, 3.6769381863995657`*^9}, 
   3.6769382324052725`*^9, 3.676939832291031*^9, 3.676939986110894*^9, 
   3.6769914104897127`*^9, 3.676992294813296*^9, 3.676993776968561*^9, 
   3.676993844354596*^9, 3.676993985559265*^9, 3.6769940258073835`*^9, 
   3.6771057104302807`*^9, 3.6771057560203443`*^9, {3.6771057906803927`*^9, 
   3.6771058142604256`*^9}, 3.677449677843527*^9, 3.6774522072372*^9, 
   3.677452263914441*^9, 3.6774529311066027`*^9, 3.6837630339974437`*^9, 
   3.6837650942172813`*^9, 3.683765728721573*^9, 3.683767108607498*^9, {
   3.683767145828627*^9, 3.683767161897546*^9}, 3.6837673280700507`*^9, 
   3.6837673996291437`*^9, 3.683768241328286*^9, 3.6837682897810574`*^9, 
   3.6837685868657217`*^9, 3.6887863289383383`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"showCircles", "[", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Epsilon]", "=", 
      FractionBox["1", "4"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1", ",", 
          RowBox[{"1", "-", "\[Epsilon]"}]}], "}"}], ",", "Red"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"1", "-", "\[Epsilon]"}], ",", "1"}], "}"}], ",", "Green"}],
        "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "-", "\[Epsilon]"}], ",", "1", ",", "1"}], "}"}], ",", 
        "Blue"}], "}"}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.68376650562801*^9, 3.683766506241045*^9}, {
  3.6837665881377287`*^9, 3.6837665888597703`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["3", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[1, 0, 0],
      FrontFaceColor->RGBColor[1, 0, 0],
      BackFaceColor->RGBColor[1, 0, 0],
      GraphicsColor->RGBColor[1, 0, 0],
      FontColor->RGBColor[1, 0, 0]], "\[Cross]", 
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["3", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[0, 1, 0],
      FrontFaceColor->RGBColor[0, 1, 0],
      BackFaceColor->RGBColor[0, 1, 0],
      GraphicsColor->RGBColor[0, 1, 0],
      FontColor->RGBColor[0, 1, 0]]}], "\[Equal]", 
    RowBox[{"styleMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["7", "9"], ",", 
         RowBox[{"-", 
          FractionBox["4", "9"]}], ",", 
         RowBox[{"-", 
          FractionBox["4", "9"]}]}], "}"}], ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
              Rational[1, 2], 
              Rational[1, 2], 0], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           Frame->True,
           FrameStyle->RGBColor[0.3333333333333333, 0.3333333333333333, 0.],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 1.35 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}],
           PlotRangePadding->None],
          "RGBColor[1/2, 1/2, 0]"],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[
               Rational[1, 2], 
               Rational[1, 2], 0]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[
         Rational[1, 2], 
         Rational[1, 2], 0],
        Editable->False,
        Selectable->False]}], "}"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["3", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[1, 0, 0],
      FrontFaceColor->RGBColor[1, 0, 0],
      BackFaceColor->RGBColor[1, 0, 0],
      GraphicsColor->RGBColor[1, 0, 0],
      FontColor->RGBColor[1, 0, 0]], "\[Cross]", 
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["3", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontColor->RGBColor[0, 0, 1]]}], "\[Equal]", 
    RowBox[{"styleMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         FractionBox["4", "9"], ",", 
         RowBox[{"-", 
          FractionBox["7", "9"]}], ",", 
         FractionBox["4", "9"]}], "}"}], ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[
              Rational[1, 2], 0, 
              Rational[1, 2]], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           Frame->True,
           FrameStyle->RGBColor[0.3333333333333333, 0., 0.3333333333333333],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 1.35 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}],
           PlotRangePadding->None],
          "RGBColor[1/2, 0, 1/2]"],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[
               Rational[1, 2], 0, 
               Rational[1, 2]]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[
         Rational[1, 2], 0, 
         Rational[1, 2]],
        Editable->False,
        Selectable->False]}], "}"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["3", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[0, 1, 0],
      FrontFaceColor->RGBColor[0, 1, 0],
      BackFaceColor->RGBColor[0, 1, 0],
      GraphicsColor->RGBColor[0, 1, 0],
      FontColor->RGBColor[0, 1, 0]], "\[Cross]", 
     StyleBox[
      TagBox[
       RowBox[{"(", "\[NoBreak]", 
        TagBox[GridBox[{
           {
            FractionBox["3", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]},
           {
            FractionBox["4", 
             SqrtBox["41"]]}
          },
          
          GridBoxAlignment->{
           "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
            "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}, "RowsIndexed" -> {}}],
         Column], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]],
      StripOnInput->False,
      LineColor->RGBColor[0, 0, 1],
      FrontFaceColor->RGBColor[0, 0, 1],
      BackFaceColor->RGBColor[0, 0, 1],
      GraphicsColor->RGBColor[0, 0, 1],
      FontColor->RGBColor[0, 0, 1]]}], "\[Equal]", 
    RowBox[{"styleMatrix", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", 
          FractionBox["4", "9"]}], ",", 
         RowBox[{"-", 
          FractionBox["4", "9"]}], ",", 
         FractionBox["7", "9"]}], "}"}], ",", 
       InterpretationBox[
        ButtonBox[
         TooltipBox[
          GraphicsBox[{
            {GrayLevel[0], RectangleBox[{0, 0}]}, 
            {GrayLevel[0], RectangleBox[{1, -1}]}, 
            {RGBColor[0, 
              Rational[1, 2], 
              Rational[1, 2]], RectangleBox[{0, -1}, {2, 1}]}},
           AspectRatio->1,
           Frame->True,
           FrameStyle->RGBColor[0., 0.3333333333333333, 0.3333333333333333],
           FrameTicks->None,
           
           ImageSize->
            Dynamic[{
             Automatic, 1.35 CurrentValue["FontCapHeight"]/
              AbsoluteCurrentValue[Magnification]}],
           PlotRangePadding->None],
          "RGBColor[0, 1/2, 1/2]"],
         Appearance->None,
         BaseStyle->{},
         BaselinePosition->Baseline,
         ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
           If[
            Not[
             AbsoluteCurrentValue["Deployed"]], 
            SelectionMove[Typeset`box$, All, Expression]; 
            FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
            FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[0, 
               Rational[1, 2], 
               Rational[1, 2]]; 
            FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
            MathLink`CallFrontEnd[
              FrontEnd`AttachCell[Typeset`box$, 
               FrontEndResource["RGBColorValueSelector"], {
               0, {Left, Bottom}}, {Left, Top}, 
               "ClosingActions" -> {
                "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
         DefaultBaseStyle->{},
         Evaluator->Automatic,
         Method->"Preemptive"],
        RGBColor[0, 
         Rational[1, 2], 
         Rational[1, 2]],
        Editable->False,
        Selectable->False]}], "}"}], "]"}]}]}], "}"}]], "Print",
 CellChangeTimes->{
  3.6769377623855534`*^9, 3.6769378022336655`*^9, 3.6769380724503155`*^9, {
   3.6769381054658227`*^9, 3.6769381171935034`*^9}, 3.676938197464736*^9, 
   3.676938232422773*^9, 3.6769398328035393`*^9, 3.6769399861483946`*^9, 
   3.676991410527213*^9, 3.676993777201065*^9, 3.6769938445921*^9, 
   3.6771057105802803`*^9, {3.677105790750393*^9, 3.677105814410426*^9}, 
   3.677449677995535*^9, 3.6774529312446103`*^9, 3.6837650944152927`*^9, 
   3.683765728934585*^9, 3.6837671087535067`*^9, {3.6837671460496397`*^9, 
   3.6837671621125584`*^9}, 3.6837673282860627`*^9, 3.6837673998401556`*^9, 
   3.6837682414942956`*^9, 3.683768289934066*^9, 3.6837685870317316`*^9, 
   3.6887863292083535`*^9}],

Cell[BoxData[
 Graphics3DBox[{{
    {RGBColor[1, 0, 0], Dashing[{0, Small}], 
     Arrow3DBox[
      NCache[{{0, 0, 0}, {
        4 41^Rational[-1, 2], 4 41^Rational[-1, 2], 3 41^Rational[-1, 2]}}, {{
        0, 0, 0}, {0.6246950475544243, 0.6246950475544243, 
        0.4685212856658182}}]]}, {{}, {}, 
     {RGBColor[1, 0, 0], AbsoluteThickness[2], Line3DBox[CompressedData["
1:eJwt2nk0VP8bB3BKm7TZ2oQoe4utKHokQhtKVKSyFJFUKpWQpSghWSJJRYTI
kih5QtmzzY4xM9bLjKRQpPzu95zfX3PO68z5nDufz/Pc+7zPnbVO5w+6zhIS
EmoWFhKaTX7avZy3iMm9Xi5V0rBUW7sHY3XPFCYmDoJnQBSVlXEE96CW+H71
HlxcpGRz6+kgxFIo4s8y3NA40MbdSbEHfb6ElzilD4Jb+6Dm9QxfXKftLx8g
0YONhUHV4vmDsDHkfoVBRhhSaS+IwJ/dqOV6v1m5dhCaHm8Su/LyEa66/jYu
o6AbJ35eOr5ufBAUS604F19k4qsf9hZRG7ox/a/H2PE9Q/C1zVzeJ6EEc+Ef
e5s0D8V8i4IieEMQN+fGVLhwKXYLE2t9xXhYw7TQ2No/BAG7Xr5+5FGKCut8
Qt/M4mFV9JZ17UND4OQUsz4V3mPg0fRi8REuntaqn5w/NgSaEjxRm4EPuGJG
aumTGi4eYhgvF53Lh3rimbquLqJe+4KVjVe56Onz9+8jFT683Ex5IdJXiTG7
P2pZvuLg98GVs3ln+EDYOaoWutUh8zjzzQ9hNurk5wWzm/iwKOHk3/FHdagn
7xqdPNyJdLPFoq6tfJhRNzivVVeHyXWq+sDqxHIITe2j8KH5oPN0gmo9Rn7P
mfJ604lWy+BPK5MPCQPzPCWH6lE0ybDR17EToxzptnbdfKiSqlOodW/EPWoX
120r7cBa315FyTE+BP0sOFrj3IwJQsMdCe7tuH16o/1BcQF0+Rh8UHrYjGGm
Xh0uNu34Z6agZUpCACpR8wz9K5tx3qqFe9ShHd3ii0yTpQRg/EKq9O7SFpyU
/BKeJtmOKi0PNOpXCCA7ZE/OqFcLlvRTlS2Qhd+SsbtVVgCx7X9cJ9VaMd7r
VtgJCRbWbv6XEq0qADl+hG7N0zb0y6MG9BczUPxMvGKdvgAuySQevVbchmrv
D2oee8bAs71m8+5vE8Cht57Cyl/bUEmmQ6/2HgMz7rUr7dkugCah19U+U21I
v/ze8eFJBp5PG1nxxkAAryefR7FsKPhkqCG+fwED7wxbfFYDASj1/dQ/40HB
oOjs8A1jdPQ+cDaohPRIh1yD77comPNw+bRXFx2VUjfeACMB4L8vumO5FFwy
4eXDK6AjZ7+ijP5OAVDCwk9Uzafiv8MOpqH2dNSDxBUdxgLIDFXZoi5HxVlf
6dWppnRcszUrU2uXAAISV22L1KXiPbGi0eJNdJz3OfxiMOkx94OKTJ2oKJuS
dIQym471NW6FS00EwE80kk/ypeLcPypPWcM03Oe8W20/6TPLu18MRlKxSntd
WjuDhhvYue1BpJ/K9GRf+0BFMe1r/xqzabgn5tsAi3RHy4yw961UfLnCybE8
joazv78x+UP6nFi3LRMDVEyWoj/ICqCh9AVqu5SpAF5sd+Bp/KPiM5pcygN3
Gm4sPpilSjp/x6YQR0kaJhvdC7t0iIZvZpQKt5Du1BC18p4aDY9fc7W1MqQh
fcOBcQPSH5psSC4woqFV57SYijINH32q9v7Pd5uWzKXZ0tD6X2r+1FIaljGi
1+uS3pvafeiHJ/k7s59b1E5RsUErV0KZ9AyXE/6iweR19x1qj+6l4hpNhe3i
pA8xuwPXJNKwmjfP3aaJio2to48nyN8Vokj7rf2Fhm3T9XGNz6gYJfVpQTbp
QR8LnLd20HB+8O0dt+5RsYDWIn2DdOKBzwPdURqGJT6Z2nyZivsunjpuQrqB
XrS8who6rthnUnnLnIp6R/QSKsnz8mY5XV2qTUerinCmghYVg8qe3L1K+hLb
hX6T5nTMvRK/HFdTUU274t160gv9yWPxoaOfvP/6wW8UlD8bg+fIOplpbSj6
10DHl1biy0XiKOjlOXgnh6y3I7nhAxU8OvL8pUQD/Cnodwn3qpNuuXlHSsAv
OhZmf7MaP0PBWcSaPS/Iuv1tVRQ0pMDAsk4coWyj4HXZ3xP+OwTw7BTE37zG
wOOfXRcc47bhTNUKqT6yX9jrwk/ErmfiqjsJnpFqbfinRirMU1cAwg73Xn81
YGIJdaFO27I2VG5wiT+rI4DpHffWC9kw8bwZtXvpZCv+yIU3J7UFUHH62DWr
ICa+jrESD6hpxTGrmnm6mgL4mhAw+aSLiQnyzX5yLq34aD3ngL+GAByMXuT0
x7HwO8PgxZXkFgxzjbv7cK0AFLvLvwrPtKMNf3jjCYkm7IpqetQwRwAnhZWO
/C1lo8ziyojivBocO5bnHl3Mh2s2xO/ur2yUnjLqjAmowbx7b0xqC/kQ+MbB
rILHxm+BwqfdLWswPfWh9eQbPly8xGCdWdCFje2P7eaMVGN/XNVss2w+pP1g
73M40oU6uyn/JjdUY+DiUHb0Uz7s8vbe1DXWhTFZueXcrM9YGNy+gHObD28m
x3XEJblIX11z8FdqBerY3n131ooPhRu9wo5t52Gjf/mCJuF3+CFTy8m7eQjU
GUbfaAE9GJibvj/XLBJ2Zi9KtnAcBN0IqWvHnPpwc5yD8em55YD7Fu0UDxoA
k/QNgaNN/Xg+d+9PvTkNwN3XdDTkTB9ERnbF+00MoMLnhT/v1FHg4PYrfnsr
u+Hblz33haYGsEU/6toJLgUKt4hIV7zrhvQVDQ/8/w7gRic3ca1fFHDjXFqo
9bob9rFiKtxECLxofd2ldh0VvhhdlJz7qBtMBA5p48sIfO70i18SQIXvL24R
V851wyGrl2Xf1QnUurj7cZoODQ74HB28ubwbCmJNik7bE1hhu842IIkOK7bu
EtNx48GYOnFbLZPAyzYLghcdZsHI0QWlRZMcWCuksFwhi0DzDfv+LDvLgjSv
PYnD3RzoZFdUS+QQOM9Dz3VpAAseebhwZRs5YFB2LKgvj8D5tIVTU5ksMN7U
XXI2hQP3s6wcjd8RWD/R//j2NAs8VF6oZxpzYN2nXnPeZwIHwoPPXHreDht+
zuspD+8CqXcbNuV3EChy8nZ64GAHhH+s3hskzgajpXE8fieBB3SPlZf+7YBH
+lL5bVOdIGtoniHfReC5ppfqgmWdINUXsVGmpxP61c95+HIJXJ7q8d1gWyc8
efowLKmwE7aq/Wvi9hI4N2p38v27nbBl3hM7U5tOcF62uz5WQOC6l88tB1TZ
EPqHZ38ktgPkwkRivIcJfOU9c6HQkA0yak7DBn4d0Kcq5777G4H5+XHJvtZs
8N2w5ccqlw6ghqaYcEcIVFB49GvYlw3zuzs8q7Q74JtoRHbjDwK/C13eGVLD
hv7VITXVbe1w3emPRNgvArMypRfbO3dB6fpAheQl7fDqy9YlS34TyLX4YnPM
twtGhHvE5oyzIErr4IIo0teuN15ifb8LMrM25J1uZ4H27YeT1ybJfRhRqF33
rgv2tR7Tl0xnwWQWvfrPFIEuSV7pLqIckJzK1F25jQXLNEPe7vlDYJWUZ7+s
HAfaXFvemMuxoOih8vMY0o9cPu/Zos0Bj2Gq3AURFkhpCl9eNE1g6B/rzSuP
c0CzK+5XThMTrH9J2huR7m2T7PTmAgeMfc+c/1TIBNl81g5P0r0mKyt33ObA
x3tGk42PmCD3bvdMLulLS+PHjfI48HDU/FSrExMeWXR2fCG9tLWyrKiKA+PC
Tw7UmTFBy+HvWxrpH3TrkuSYHIiYbez5XoMJwX7p97tIz00dCb8l4MBV+eaK
tGVMCNvU5sQlnaEMxueEuNDpzrYNm2BA+miQbgfpN4RPGseJcuEzbZ62awcD
nm0pndNM+qeZwMoSSS7MMuQf3/6JAVnuvpQPpO+fX48MWS5MHFHiiKYz4ODw
l5RnpKOJy9YfKly4XXG0nBLOgKjVr84Ekn5V8brSfG0uCIaUZ8d7MaDYVH3j
EdJPHNl6d6UhFx4q6r61PsSA7xnbi36Q+ywy7pC20ZoLV7UyAt7KMMD+islL
CnleR+c9oK69xoX5KuEhm/Lo4B1Td/w66V7lkqskgrlgr9u9oPwhHST++kus
In1OTMPHmQgutF7s0t/tSwezCuKaCVkP08L5kg2pXKjNjC3ZtZMODzVUtpiS
9RZuVlqgWssFmRLlBWNtNNC33RM5MUpgLMwyE5HmQckDqfLN41Q4trVefwPp
a8VvrcuS44Gx84rI4ywqwAnpfofvBLbFmersVeWBrxcjJOQjFcwNZ3ZmkH0R
+a+N42/AgxHrhjkVoVTYpP5zETFE3gd2FqzOceLBopWvN49LUcFGiaK9qpvs
l/KYltW5PAj9lD3fWpcC5qvm6k2Q/VtieuM1pZgHahE11XNXU+B3ymuVRg6B
CbnNW+4gD2zplu3vhCigPS+gxZVN4HYhw928Fh7s/HhstVhjG8TJBRhbMQlc
vJgvc+onD9xYd0tvOrXBMx3vX8JfCWxPkqfc39oNp0f8F96LbIW2k3kbO/IJ
NHg0PRBR1g1NG1yaJqqb4XTNpl833QlMeym4nl/SA6eOfog3FqmDHY7Kq56e
JtA1x3a6/1MPbDiRa6FeVwtjgQEGpc5knSRHtEnX9cA56fccschaCJ6VEcQ8
Tl7nkt+XXFk9QD899fv98lqwi0rSqLIm98HRw6J8sgca7V9++KxWA0fP9X6w
0CMwJlNa30G/F756Wbg8sfwC89dfsFMQInDHgkWH9Yt6oXOHx7v22ArwWzYa
aHBjAC9vUTo8k9AH5vJ1NyMUiuBlrdGSOJV+vFguMc9s8QAcUYJp1XUv8ADD
ZqFjbC8Wtu26nrqEgFqDdEunB5W4WM5gYWtEL3oeW7dNW4KAJINblsWNlSgo
8dq2I7QX7X+MqaI0AWl3rvwVmV+FG9bs2TTvSi8G3nWJq1xDQPlohHyMfxXa
KOzKO2TXizUTnQFX1Ql4v5zz2t3jM0ZQ+74zV/Ti7k93Gh+ZEhC5Q3THzK5q
TOfJSqUl9OA/gel4gQ8BXQ/W21p+r8NfZ7+bnIrqwU4ur9/9KgHS9fPeMtXq
se3nZ/6KOz0YriAuWHmdAN8Du3OOudbjeBoz4+qVHrxQprTRNYAAg5upa83b
63GT3evVP2168MZhK7/McAIePXt/pKaqAXM52+b1Lu3BjOr4VF4yAWHX4Y55
3Fdkc+YQ5SHdOL+27fzKcgJkPBTOjj5qwQ2qXze4+XXj0lQp0zYkoGDA4+GX
whZcJjnQK+bTjVs2nxIKrSCgZDwpJa6pBUuDrfPMnbux1uyMMvMzARTRbUaq
Iq240HviW/jObozeRVPXbSDgVHjGrzXnW5FaSBXo/OVhoPzRkjo6AVcbF/ps
NWnDn9R977Zf4GFY2ZbAY4MEDJSfr5weomCod942Ozdynlkr62I5RMCZYD8v
ozlkbnl+6ZLXCR7Gv4tV3MEnz7d7lnoAmXPKx4cWRe8n1w831VkwTEChTvKH
4UNUTLhvty5VlYfZaunxh78TELF/3e3IMiqmxL6qHedysdO1RbtmnIAMZtka
VgQNd/rMyvnK4OKiAy4lRycIWJuU11D/koaZ3Y5uz5q4aBUSJdVPOh7VUHz3
iYYHV2+6bFDGRflxhaOCXwT4jei8DRij4X12uezOBC5+TqAK500SYPS4t6CZ
zGd+/eULft/nYr1wntnSKQKazAOn4i7T8du+CU5WCBdTnLa4epB+qzerxDaK
jkkH9OxELnLxceFPpSV/CDi2yCKgppKO/rNv5t/ex0XWLokqsWkCzG23h7iq
MrByz49Xh4y5uM6rPYB8jsGcBR7bFEwZ6GUSP7xaj4sqrZuEz5H+Y62JDpPM
qUlSjgGcDVycc2+uWQzpcvoV7nf8GLgTjJxSFLlY3XrI+g3pizq72jY9YqDL
E53EIyu56PRzsXwN6dNRj8+0FjJQ+7SO8uIlXGw6rFlIJ92C+kvOs5mBaqrb
lqAIFwevFItySM9aN/FzZoiBl5ODM+ljHHwoeKxEPt8g8U9SR8RcJtJUH/xY
z+Vgigtvbjvpd6mCJnEFJgqUkmZ5NnCwLS0su5H0/RvHvjwwZOJ3j5SuzGIO
jt2Nkywh/cD9DyULjjJx9o3UiM5nHHwvttg4mXTBTcun132YeNc/XXzefQ62
bJ3SvkZ6bXz5hd4oJrqYvb2i4kuur+kydIB0kRsrVcyymXj1+dpRywMcLE/t
Tesl97/AnyP/i8dEhXmPJWz1OejPXPkqjfSWrVcOmfxlYmDbEY1D68h1XEQv
Hid985jlnrsrWBgg9fuI1lQX3p538WApeb7iz7e5ClmyUNa6yCI0vQsnA+Wt
VpF1smbn6UuxH1hYvk5iMGiKjebeQg63xghYkT4gcfhhO549Zmn5p5eNbqEq
77/+JOCO0axOtdx27Hlus9ijmY36HVYccdI9zy/j/65txzrvorzNaWzEEr+A
O6MEJGfPxZv/2jEiUW3T4f1svGGbt2bVN/J+9TnJVdW9A/d/k06bn9KJ/hMN
C/v6CBjKtB0RNuzEbybH/pnqd+DlBvo3iRYCMitXBgR1sfHRtMssOcUOfOjy
fPetJgI8PgQsbv/FxiHplT7fxTrw88rIgoFGsi9uHN2puqwL/8rtLPXjtqNo
T3Tt0zqyv8LUL+fu6sIVNSd8t99pxyWHDKfKKgkQpSpaHcrswtZQBbCjsNAt
x6o7u5CAbK9/+ULeZH3IfJutc5qJPb/dH5+IJuCLXmKjgx8XTR0fXhu8SsO9
bVPZu3TJfmfFD0r84mFRVn7Vq1M0bPQyPKutRcC3tbdPUoTJ+11ORqfLXhpW
WZ40X7OJAKvnS30jxbox2O1jdIMsDacrzc5wVMjngkSE/6+13WgmZp5o/4WK
82/8NFkjQ4DWqHtq7L5uXP02c/juMjKfc1ZuChQmQH9uwfjv1G4U/qo8uu9l
G5bbjQcTNQPwN15jyZHdPdjKHpBSDW3G46ccJi/vGoAt95kjvUG9eFJHipv+
uBKNorcI+zD6YKtIwilnfj8SW3J7zv3LxCX+vkOhqr0QqHhwKbWRwAcVb58N
t2fA/YFeV7Ut3cARyc5aazqEh5XPt0utroLZlxc6TT/kgM8bjbt5Hnxk3uH+
Sd9bBaX+9moNgRzw0mCvkjzPxwHr+06aflXwc0Wvfsw5Dpjckvlx4SIf47jC
LfrsKmhKvrZzgRkHljlOe6+8xkenvVe6ljz9DOfyVl59PNkFZ3vuJy6/zUe3
0dunq9dWw41bXuk2x7tAbrqhrzmFj+8sqg+IKtYBoSpRul2ODRs5B4zUG/i4
oVZaQXCwDl4qnXots5AN1Pwnqu++8nHuNodPNUF10OMOwRMTnfBYxMLYoIWP
izw6Nnp214FK2/mB2KZO8Dm2Y0aTxkfNlIR7bs/qweGjrczNm50wWVAR39DF
R12Nx/PXyzZC+5P4hzOsDkhTePS++Du5fqtwhL14M/QyPPkj99vhMe2nvPsS
AUaFijyzMm2G4T3Fl3WutsO6BTdYhssEuNpZ7q2BbzNksU1OXTjZDjdO6N0U
lRDgtXdTTyfZzUC/d/YKVasdFpmahtyTFuDeA9qXgmxaoGBrt5URgwX/ZpcG
aawR4NnKwa1Zsq2wmd5/v0iWBeIfdFmDKgL0vOp8gLW1FU7G5O4KmseCsLli
YoZqArQ+g+dnW7dC7sPEz+bfmZA93acQpi5AmuS6YvPgVqC0Jhl/qmDCqhHV
P3M2CvDMHpk78QOtwL87j3/UhQkRPcv3pWqR63+6OqSX1wbSJxTaDDMZkIOn
VSy3CfCvCnWfVG0b6CybfepxNAN8W3svyW8XoPxB+m4Btw3sDvxW+uHLAKtP
4SmDpBcRmn3h4hQ44OJ06Z4FA2Z1OUU7GwrwnJXb7ODLFDBwPv/13BAdVn+N
4o6DADcuEbXXjqSAyvK11Lg2OkStvCh320iAd97tXtb1kgI0nyfm797Tgbg4
vH3xTgG+blO9qcCkgFHg5fj+u3QY40kummsswCpQiDi9jQppm+/c/qVGh6Rx
b7HYXQK8vGi1+OBBKlwB1zK+OB1Swg7r9JCOrxeWu3pQQV7DMIE1RQP+9g49
NRMB6t597rE/mQoGlnF2z+tpMBF9nfGU9BYpnRMlRVT45/5rz80CGugevnih
ifQf0rEOa76S877y8hnrJBpU+tcMjJFOvVHm4NdHrj89eF0+iAZpU17bJEwF
qCDIPEL7S4V4lTNfCHcatCw66a5K+uwGWwsVaRrUFN3py7KmgdbhWJ+tpK/U
/6J8eSMNHM/v7j6tT4P0L/McDEkPlh4XfNhNAx/+00qZtTT4k10it530QZHB
B9OONIjyj7nfOJ8GUzkZuJn0q+7pS7ZepUHyDtk9V75TwfkLY7ss6T1em094
RNHgx4zJzEomFXotDsTOJn3iG8WuAmnwPPjSecsMKpQ929T+lvxdb4oubbvI
oEFSkuylQ1FUYOuI1QWTfuK8x6I1IzQIqdpUaX2VCgmNZRwL0jXmyZ09KUuH
FSXqxw3NqBAc0BlSTu5/bvxqsyd+dBgSvrKztZ8Cp5eeemNBnmO5/NiYTCwd
iu217DObKLA/cyWXSZ572NU6x/hsOvzWbhy/VkyB7BpnvZOkaxUf33elnQ4x
xy/Uit2mAOudjrMdWT/bvuqwBrcyIFXuy9PRdWTd/fyTPkDWocHPkTdbLBkg
bfjS74kYBfTkXWT1SB8WKVt68zQDNvcaLjUZawP3xy8/BRoIcEtjwYGJWAYM
BSZeuVXVBp7aYcFTZF+0ORYuSRplgPm66L8fT7XBxxzG/OitAhy7Vz3/2Ssm
xFcm9+160goF4QkWuzYJUCjSzzH4ExOehPfYp4S0Ai4x8pMm+7FwpIbmyGBC
LjVz/KdHK+xkjnfyNMh1rlcsEZ7DggHPZXnR21qBGOGpniL7/XLbGqEfJ1hQ
GG87Gc1ogervz/8IrxdgYlaDZaBkO5wUZ48ULG2BDJXVtMYVAjx2Mf2vgm8H
vBfReXB0phFa9quF3J3iY4PyVekXER1ge7/ism1LI1iNRd0L/83HyKrUMJln
HdC/4JbrvmeNINxh1HZrgo/aRVtd/9R1gOcpkVjFXY3wY/iGnOMPPnKlLl12
W90JSWP+HoG3G6BO9GrNl0E+pn49l/GnrBPMGVnTfxfWQ8gNRpU1g4+DTT8P
9k6xgRtCKTsiXgP9J3dcOfmaj7OUD287tpkLfvnq88SXVEDwZzUrf1M+hm8T
1qDGdMOnxrkLDqakwBD/lJWj6BCenK28lx3YCydRRn7txnxM7mV1XblG4GdX
pWdh0v2wtKku69Xzz5g1PPLkZkw/UnRO9j09PwDyLK6k6esWnL0wrsl6bS+e
Ss57rX6IAMJM/pzPUToa7A2wSAjj4fyXEf5bbQl4xXq25PgFcs5+ZplS7MfD
uzWKdgZHCbCZKDGBcDpqfFgw2uLNw8+TYjKaJwjQu7p/7/cSOupmsp9MHOGh
ZKwEu/osOX8snxEVWcFA45NffOaSeSMIqkOeBxLgc1rDSUBl4KmlRqu213JR
iv9xlVQGOY/qyRg/sGChWjk8Xzqbix1JLAejVwTQF4etfnqShXTt3jaNYQ5q
pg5EumQTsNjC6U36VRZWWzww2ETlYHWh26eEPALWn5n9IzmdhRFCbuUrnpMe
fdD81TsCqqSYMtrC7bjYdZlpgCEHt7+ad863mgDJdeW2v4vbMYSQzku92IVs
9yf+VV1kDgksmy6R6cQor0whN3onnkgUaE5wyDzQdtPMXrMT1enXWqTLO9Fl
tnieAo+AlJtTdyZMO1FPrPtieXon7h4pmuPeQ8Aynxja8vOdaNlTZ/bbpxOt
+u7IZA+QOZaRIDGnohN53552SkuQnye4xSIjBLxrzXoR6szG9zEXF8050IHy
ao0DFNJ74G5v0VU2tn0R792l24G1/ISuZDK/SSa9rOu8x8YDGadGbsh04Bvl
+WtkfpBz9uhlT+kiNvLbvpYxhtpxjsNmZjM5N68pGr+zWaQLB/IiuTvI+bL2
Ok9RjJyzDUvrS/4878LzVqnlLeUsfDbyOuUq6U8cI/sKirtQ0/ZMfTq5r96K
Pzo7Sb/W1X/aqb4LOboZXj4R5Ny+xf9FLDnHx6TmHsoa7cLIJR8T/x1lodeu
Xbal5Nwf4OC1jw0cVOqpV6sZY6LYnFNDP0g/k5Yaa3uIg0ZajCz3DiY68ux2
KpF545XDHtHa0xxcEdY5PqeSiRKaT7deJ/2UTdLZh2RecRTfPFeDzClLX7fT
k0jfGxe9dziVgxfnajLfXmbipM0XvbekE3tTdkMRB51vRkfqOzBxZ8yR43Wk
V7l8tw2v4aBtVvamd8ZMND4eZcIgPaz67dWGdg5amfIqNqoycbPh6W9dpGsc
kkub842Dj8Mf7E1dwkQV845j/+W02LE8/mMhLuroyFIWTjBQSfFbeAfph7Vs
52qKcnFj0JDjhU4Gis5KvdHy3/W3PJGrlODiqk324y2VDHyc8XMTkm5poKhr
uYaLPpfoyWqvGHjDdfhlBunHeoNNmEpcnDX7s71/FANVtws6XUn3z7Q269Ln
Yo1msr6kAwOffRJO3k76s1f/dO13cTE75rirrTEDP+p3rVlIulLBXCkqmY8H
y3dUxqgwMH6O7NkEcv9nqguSSk9wccf0GtWpMTr263kpuZLnuDgiMOhQKOkK
zSdC7tPxw8dtHaKk6750rAqM5KLz4J6hVT50vHzG9kEWWQ9NL4dEs8h8L2En
tyznGB2LF7KEmb8JaM3amf79FRdL7XbsK1em4zG74YmhCQKCo+Lr9jeR1yMZ
o/iigoZqW1fsHyXz2OQth0FTaR4G6z0tujRGxamPaymBZB/5xWX5yb7goXWF
4QN7Wwp6KFyZOt1N5pmB88612Tx8ZfYhxtqAgk4G1SpmZD+qq5wV8yriYQx3
z4SxAgXrDp1/PN7137nkJ+d84WFEbvr08m9tKJP+lSvaTvZXS47fxAAP47k5
b++FtmGtf8Gm5c0E5ArTvD6od+Pu3y/snha2Ys/YqHlpEQFUoyMTf/K60V93
5PYLsRY87NXyqqSAgFmVjbPrS7rxtMDt8gtOM7o6Ky3Lf0PWs0R1TUxFNw4f
yumcSG9GSkboeEQOAZ2XHNwlKd14/extfpBWMz5VSVo/+oJcR1G4iTHejd/X
bKZo7m3CaRXKa48HZA5UcJl02NaDJ66nL5+83ojS6aarN54h4FPZCVEr7MGG
W3LHUqm1uDW1453kvwFInd9SblfSi203ifaRSxW4/ih15+OpAdARsG4bYy86
Jm3tCzaowJtY07f61wCo0Jx0VKp7cfXWVQXkDQp7RJYFLPw+ABueq+r3Unqx
yVm5Xin+E0rmPV2SxhuAvGVH38uO9GKY/mi3njfi4bB/3h+qBiBFjbo+eV0f
pg1UrX0x8QElPv+sDA8egPCzn/Re3+tDmQ+KlaH/ivCMkVI1e7QfjKRumrda
9KO85p1RyVnJqDlVxYpw74Os8p/9TYkDuDT0L0/qyDuw9n01+tGpDw6fSbwv
nzKAGqk2AdVN78Dy1GapQfs+kDWqTfV4PoCPzF/d8DYtgeY+vL3hQB9kw595
37IGMLBccdEbrVK4dCna4rxWH5TY5Je8+DCAsYuKJlhiHyBd9K0Qc7IXbp01
eNbaMYAh/17MKcNykF+N8vtCemE6+UXXpuUE9i9Yscd9SRUMxv2s1w7rAUHi
iRfl5PN46achjajj9XDWyiQqNLAHfG85j+v6EZg2x7oh52E9jDwdTWzz7YGg
mtdHMvwJXEExmqyqqwczS1a4o3sPHPxSYuUbTGDs5YPNXboNMF/85Pwde3pA
6KL3RFsEgf5ZOeOfFzWCnpqsypqFPRCfc+Lx2RQCX4rNLzMr+woBWn893MO7
YenU11y5jwRqSgbN6w9vAWXP2XnKt7rB2vy3HLOcwAupWzfcSmsBr2zTKzzf
bhj8tivm7icCzRa83LMCW4CjG5Jo5tYNlTmPfdlVBIoaDh7cNtYCKycsPbp2
d4Pk+vU7t9cTOKrc07vPsRUy1bpm6c3uhi3vlc/RaQTeVP3s/VKzDdjzE86/
8uXBv/svWGEEgSLOa73/USmwQXufmOx5HpRtCXCMGyS/vyBs845RCswcepZ/
35UH3LKU+qQhAu0qXxj7LqJC6SvxtY4HeaB3+5ZdtIDAf3vbtneYUqGgo4BT
pc6DtP2bDZS+E7gx9MAz+2Iq7Fhx1zSdzYXd8plT0+MEnpOy0oN4Mj/8Myhu
oHBhn+RuWsIEgfzeyoPyZL45l9lkP1zHBX2NSw/VfxGoICoGf77SoGdvk5VC
MRe+XaaWGv4m8OIX13Mpc+jwZ+FezUORXBjOfJQlNkVg2PNruxJ96NBePJFw
KIQLidW3n3iRfjiAttg8mg75nuv2WF7nwoS44GId6e+Woud3cr7X0r2QrHea
C9HlxZ/d/xB40Kv004YeOlhFL7CgGHKhJe6X8OFpAoVc1g8ftWbAhqBx+1xt
LpzYYDDXn/TNl8q8qZ4MELnv0BqiygW34lOCp6QXVy0yNw9jQO0XxRxbOS7Q
wxyL3pPuf9zM4+0Lcp0HmiOKUlzInK3u2ET6Hs3EttXIgIbn554IRLnAj6gY
bCd91mrdKzfaGWA7/an0jRAXqh7I2v33/q2p58AB6jgD7rDUI7kCDpy9bfTy
v/d1biYyh5SWMeGb7JtoWyYHNPqVGf+939s2QPW7oMGEvngisKqKAxe1GYP/
vQ/MOltQ9daMCeNp+S7KeRx48+tg13/vD7c7f5f76cSEtT8vyVJDOXB6Y6On
x3/eHTp5JJEJArqW0JoLHFBldM4F0u/6OJ65VcSE1thFww4OHPB35gaRzz3U
e5TY8LyZCb2zymcqtDgwyJ2WjyL32eCV5ZEWMm/M+nROc2ANB6KN9HftJl0l
x/5CpzwLPp0bDp29gAOdJ/PMJsjzmjwvOMXbzgLnOxp5azldoLPo5S8j0hd8
pmbRLrDAtrXv1djdLqB/eD8R+F+dhKHIGTYLrLOtg6a4bLj9UzI6+yeBVlP1
ykqF7eBjerdQ6Csb0idyg/7+IFBed9W53w3tsAxj/WdK2JA1cH2XBem5UhoL
P/e2g6HxzHh/NBuWyB/f3ETWecjBST0z6Q6Yde3N+HEjNihwosvuDxP4Jn9n
3jSZf9QM0pO+P+mE1hPfv/b0Efj7qGWOrGEn6M46P9hwqAM+OM15OtxKnm9e
s7fkJzZUCw4V3chmgoE9HL6XQODV2zJpZXZcEM/yzjeMZ0KGM93NMY7cn/K2
szNOXDgy9aRlMpAJH3cXpqg/JNDrXaj5Di8uFDVdDT9pywS7TUcvFUUSmCGq
vOMN2Q+Xb8VeIoSYYMQ93hwQSuDxgPM1LvlcoCrZPeu3YUDZEsXmvxcIrEof
+7tIlAcPfFvcPv2mgdX1iDWPd5P1fHBzxIESHti837B4sSYFIp2WzrrVNYCd
+fsmf83rgaTJkaXM9jqQGJU+L8jtx5hd1yLNU/vgdus2f//ADxAV+CaqcGsf
UthbDrcXDUCQr4q7usQHkLncLXxmcx8uC5v2tvs4AF7y+RIt6e/ho0T/PwnV
PoyHOKuvXwaAtbFfQ7ihFE4tPPj82Ko+XFAwavWCPgASzVlSc6VKYNVYydek
6V7c45u3+Df5HD3ucH/iXUYRyGWJvSXI52x15gFzY30Clvd1Kex7kA2H3ZrX
NOzsxfznGtfNi8mcc3vy6PK3WcD6I+lcpN+L0SHJBqyPBGRq2Z9rZ76C2Hx7
/wTNXozMLPBx+kJAtM1FXQv5TIgwaTPaS+a6PNU0A0cqARVniectuWngsUFq
u7tQL2Zpd/GnyLkq68nMxeC4xxBm8kjv1scebCo63FqtPgjy+rEnbToTocak
VHTB2x6cCX7MYWsNQs7bAM81io+g4+Cejrs5PUhUs2FYfxCmnhtMJr6JhemB
FUF+j3vwdm758JjZILSoM7cmxN+DtL02m1Zc68HHkburMpwH4a/yHWemYhho
bqMZenv3oKdy0fpbZwehtalBWzw/BDZq5J6oPNODJtaqdQcvDMLvxGDBQPwN
8A75N2Bj24N/XnbWd/kPAv/bqjkG+T7gkfrlUNz+HnTrmVyXGDoIdSb3UiQS
PCBHNYTdbNKDupTOd3sjyOv0jI7dn2AP633774gY9GDs0PVbEzGD8P//0+6Y
fJ10+L//06r9bQj47/+0/wNAy9cf
       "]]}}}, {
    {RGBColor[0, 1, 0], Dashing[{0, Small}], 
     Arrow3DBox[
      NCache[{{0, 0, 0}, {
        4 41^Rational[-1, 2], 3 41^Rational[-1, 2], 4 41^Rational[-1, 2]}}, {{
        0, 0, 0}, {0.6246950475544243, 0.4685212856658182, 
        0.6246950475544243}}]]}, {{}, {}, 
     {RGBColor[0, 1, 0], AbsoluteThickness[2], Line3DBox[CompressedData["
1:eJwt2nk0ld/3B3BKUkmGaDAmISpTIdRuoFQqlSZpjjRoVEqSJIkiIimJSkop
Y4awUYbIeOfJHUwP95KxTOn7fH7r95e1Xsu695zn7H3uea/zLDh2fqf7JCkp
KYG0lNRk8u/et1NnMgW+xUZ/a27FxXXiSNqz3RYWLXD2VgSVlbIPj7zqfP3h
cSeG3GalzLZtgWgKRTkpxROdlj4Iz33YiT+Hxrb0rWsBT3anmW/KNSxTX1pU
eLsTg985BMbvbIFlQQ9L7VJCsEGj/p3fqU78GJZ0seBiC9Q9N5G/+vYp9mjL
y1KtOrEhuitb+XMLLMx35l96/Q63ENxQcT2BNfnz6Qb6rVDb5KjjHZuHD4w7
l8zt6cBJY7nJAVPagNh7aHGW5w8cV7tQWpjThpYpZw74vmoHbfGDFZUvm9Cf
IRWxZlMLLpszVZZa0QGXNeL2X//ShHn/YqO1oQUnh692i67ugF05Z6UNapuw
KH/F35HlLfgnOWFiW10H1EmlVXiPNiHrwhrpJJ0WnEbboJdF64C0kVcRLBcK
fr7SNzfvjwjnxwSzLVs7gBJy//A3OSqG/nVKk08WYWRgsZmxFAGtiaJd/Wdp
aHzrF/3IuBCbfunVlFoQwNO7fzh6EROladvk7BMEaJL5b8XN+wRIu4Wl1dox
8U5o1F6NKAGKYi7PHQ8jYHx12CIpFyb+XH189NddAT5ReKTgHU5AqYfrdedA
Jtrlezre9xLgtuIx8+2PCaiNvTXyopmJln3XPILsBFgX8GxTZjwBbmtef2yP
YeGFTjN3yOJj3l57DeNPBCwUFddK/2OjS/jS+bILmvFicLppSw0Bsy241F2q
HLzpn6seN7UZh4kmlzu15Ly6b1onGHNQmDAteWEPD4OjdH016gmQlTceV9/H
wWdPSs9of+Whn5Z/xcomAvas/1hekM7B1O0LH2e68DD08GRXHSYBmqtvSm4d
4WLvqusJW4O56Kj2UemFiIAj0vr7/ubzkDjrVXG/hY33pvnt2dlPwHUXYlhU
y0Plx17P+NVsPLb24J4pAwQEpLttLBXykB0bzFqWyUbzxjUrMkm/dJnBOjmt
Gb9mbszID2AjxntEjAwS8Kaf5+S2rxkfOMLF25psDM5uT1/9h4D0n5Im2bPN
aK673PG1DBuNBu6/KSFdmE3lv7/VjJ9dBguKxSw0H51y1W6YgH+iNl/W22a8
q7LtgSifhY3WipkLRghYf+GCSfNgM57zlA5t3s3CzXgt7NUoAUOvX7g7yfHx
+AVBV60dC3XGRacHSI/zXDOeqc7H8YqkubkLWdjV7GaweoyAu5uZVqfW8fGZ
nPfA1T4m+r2zsiolfV/3Zkrebj5uUeJ93MpkouHBa6EjpPssW1YodYqPvYnM
LVrIxJhdIQXG4wScPLDn+PUIPrbPddyV9oCJ063a02+SvqXbYG7qKz6e1dSp
OnOZiZ+kdXxekC539s5USg4fLZp32uq5MnHPD6n5uaRr92QtGazi4xcNtSz6
GiZS1gbGVZMu7S17ZyaXj+HKSSvuGDBxKPHlEIN01c4fU7R/8VH9wpIfixWY
GJ2wexmfdN8og32zpQVId+2/XD3IwFDvV+sFpG++Org6ZjrpZ5bZuXMYWNB8
dwWH9PSRoeXKswXo+EnTcLSUgdPVpWUaSDc7x7AK0xRg14uJVfffMdCzU+1z
Mek5mg4OUgYC9FukFKQcwcCysBrLFNK/m9+42rxSgEd+NOaruDHQsXkx1530
FTOSYjauF6A3U/ZL2DoGHo5vGbElPWKKwpePTgIcPXpj7K8hA7dudhucQfrl
mXf6Th8WoI3DmhuNQ3T0NPh6K458/vkne6d+9xSgx0/dMnMuHY94FynuJf2J
/3m1eZcEmLXo1JnwMjrmSb74K5Cu6HZNOTdIgOpCl4nlEXS8bsrsO03Wgy6/
bEPZewF6KhyigyEd7+vpW7HJegu0K+eNZgrQeuoMobcCHa0OL870IP2WVYKr
SaEAq3a/DXgzSMPUWO70brJuQ+7+GA+rE2A0yj4dKKHhkZk/d3f8JqDk3eBr
lQEBhpk5s3bsp6HL10u7o8i+yFp2LsTVVoi/d7msnH2fiqZ13ZplPeQ6Jntt
UXQQYva8ltvlZ6mYV6frxu4moLyzU7l0mxD7etvbLjhTUStI55RYQkCap/Eb
lWNCvLJeesGXOVQcFob1/ukigClove0XIsQ/GRWOY8kUjD5uUlTQToDG9Afo
ShVi13rzcJ/SJoxqaY7u4JLj39lka+kpwtcypqUXBxvQ3sW+VfCNAGPGmh7a
rRbUm/R7a8DTaoz80zzu5UdA45rmd4ohLXio9LrivUPVqKw6NPbjOgEWj2cN
OTxqQZcNP28G61XjMUHyEm0fAnp0FVYmJpK/E0on4s6n/0CD9oZFORcJGNHq
M1EpbcH43htPJZVVqOYW8iDCgwC9O/+EvVKtqL/uOe/lUAU+ePmAM7GNAO/q
4O4bfq24b1aM1kGnb+hStO547Xyyrh6oXnc91oYBnd833qfl4rxJDXsPJ3SA
ffLSgL66dhRocz/E+kRAq6JRfuiFdggPb37i97sD95yKp8NYCdTZJCUcqWyF
nvLND6VGO/DwqxdbOs1L4aaVZr13SSskz62J9P/bgfG+XX7hp0shZcFh9p38
VnBiRZV6yhA4/tmKV8Mqha2ec0OiPrSCvcTtzZASgR5XI5WV8spA6a3wwqWI
Vtjl/Law15jADTa31udf/g4eVyb+rdrTCpnR9tkeBwhsiHwXq9NRCW4j1FhF
QQsMGhPBRu8IDAy/t2fb1zqwK/1En9EmggVSunN0UwmU6f1jf7q3DnTuWBgp
8ETA5ZVWqHwkME5nBtV/UT1g5b+JGTQR2BW6BrZ9JnDa4ztJkRH18EFRefno
dxE8THU+tC6XQNXf0k6fzBrAoadeOumNCPRKWh2F3wksupl/pVimEf6aInfe
cRGo5i41yeAQ+FLZ811lShPMS5d1ruAKYY1ijFDMJfD72i5fSmkTxFrdfGxH
FYLWKscUnWYCO6TMaGxOE1Rxd8d+qhFCu7HXmWsCAvePr5LjzqKAQ/du4m6B
EKyMJuoErQT+ruspSPGhwPP4VkL6qRCOK22ojpYQ+KF/uvjQBioc/73A3Gyn
ELRDZKIudJPP2apnl84RKuy3CLt0YpMQ2hZrn9rQQ+CeTK6Qe50KU06ejX68
RgjUuwn2gl8Ezr7h4rIxjQppjImgtmVC6Jn+4MPPfgLr5qwlBCo0kH512WXf
DCH4HhtTCflDoJntbe8FAho4SjaH3PgmgPflVrNmDRNo1WWc/XWMBrStKR/e
5QsgwnzntAjSQ221fmyfQwc7brtm42cBWAQ/Hrk+QuCj45273LfRgSelMaoS
L4CRVHrF2CiBcv3EbIdCOlg6/2s+6i0AJbOgnM1jBJ6tf6yfxqCD4zf5ylOn
BZD92OBVFOmnrCn1CgN0eHjIerbXEQGomklfmTlO4OfevdXFixlAsdTpdHcS
wI4/sw+sIT27w0F+pgMDvEp8rx5YJwCtDNbqs6SrFs+rdDnCAPo0U28nawFo
527494n0KeeYIQ1PGMB7OFSjoyeAp5u4nHLSY2J8A2QyGXB7xydjmfkCMHf7
m0MjnWp3scmslgHH2pSntswSwB2/5IfNpAs/a/jsIxgQUTB6pGiKAEJMmo6R
vz94aD7f49pkJmyZcfOa/h8+JPcF/vf7gw/uazyL1GKCjt8Fqx8iPiRZ5k+p
J/1Cj820NyuZ4GUTLHO8jg+pp65RvpI+of3q42cXJuy29WkbyOfDzu7yhCTS
l/C++mWfZ8K3wQn+jWQ+RKi/PxlAukb9wMXMUCb8OMAZGX3Ehy8Oxsv2kW4b
lhv0PpkJUi0/rS/68aE3xTa7n3zObUdftQZymHAl+K/d+l18OHDV/i2FXC//
+MwC4QYW7P8TKOUvxYcLUT8O+pJ+8iZRlXKUBdSK1tYv4mZQ+euvMp/0z/IH
8zz8WPDaNE+jg94MG0uJ6/ZkPZg7SGvWZ7AgNVwxYWlaMzxeYmjpQNZb+JZE
400abPDTeRq2a38zrNyzOfx3H4Efc22ZnF9syBCdtJFL54GrVfXKpaT7q1/1
XTKdA6rsr3Pyn/EADqu1u/WS9faGGXxFjwPK66enHL3LA8dV/9amkH3xPCGu
pHcfB+LXhw3EufLAxHhgJtFFYGWYeldoKQdC0nZIUmR44KJPsZgvInBqZsnH
jZFc0K1Ufbt6Lxcc58ta/yb7V6act/Poey7UCtoutqzjwnBCmuFPPtm/cp3D
l0u5YOXzcc/tZVywmHqrwZ1H4By7jUuD+riwO0nu1rspXIjRvrXOmUmu476e
qO07eHDWr4b+JosDScsv/JGuJVCyZ3zFw1nNoGh4XNZVgQNNRz4v42QQKB6k
77sRzIeh+0VsVjELPCpN/tw8ReDQcYW7l8h+5g3/0HeeyYDVhwzmv/Qg0Ddi
k+CqjRA2uAtawoboMBhwyy7/OIHVEZRNVzcIwSZ17fRSHh3uTEoJZB4kcH79
LBuPQ0I4ss3y05xPdNgb8WzJtx1kX3upm0wPF8LR0TBlH7KP93u1ft1kTa5X
T9X5wxIhNHurO8uE00Bu0cW9ulIE5tZFFhgki+Dv46lz7stRwU+pL8DuRgcO
aDcJfWRbQX5A36Rc0gBvq9bMijFsR+v2Pxd6fdqh/7x6V6BNOWxjuMw4FN2K
z+22h466E9CwrUZDCTKBx59CFAeJcPzP8yNPVLpgOKlPVutlIvpPvpkRTJ6j
jixOrdppIwa9c9OjeX4lWLa5//2udQJ8c8DwocdqMTR3fP7XmlGC5+yfdKtb
C9DLkXPu0joxhFZaP+loL8G1sOZYwkIBatiY3720WQzbMmJkm51L8Ur8nXf0
QT7qUTx5Kq5i8FtjsTFcrwx9Xi3o276NjxnxCWvZPmLQjXwq6qn+hsV6Kp2B
ozy8Wt7vfy5NDO2ymakOKpV42nX79rFWHuodudN4J10MT8+IadEbK7HllYvC
mXoejmat0YnMIsdPn2vPu1GJPy5kfzZ9w0NZm6+fHueT3/uz6uP+1kp8EGdk
snsrD8c+3PWxLhcDs8FW7l92FW7tUXsjl8DF5MclE//YYtjZrJLd41KNPfau
Ew4rObhkOO3RbSkJvDm0O2c4vBafjp+YpL2Qg65FdIewSRLgri74eby0FrvU
5nn3ynNw37GdRg9lJGA+8v1JxUAt/tVem+8nYKNev+yt63ISOPckavrlfXU4
t/LwNdt7bDRpAcfBWRJwU5ci3BfUY+NdXdhLYaGRUl/HRU0JSFQq4yn7GrD3
sPS0gkIyzxxl7prQkkCV+TfvbxcbcKgq5I3qWxaZJ3U7AnUksGbY6Mun0AZc
eYB5KvcaCz9/Mgn0XiiBn0bn9/sUNqCVD6c5WZOF25S4/iOGEih8de5wg3Yj
Jmj0TF7uQeaHCW0INZdAgrDU9XlbI7pyUKS/nYnyyksHnlpIIBcnh66eaMS1
K2xGlK2ZaLKeV/VyuQSCPitlc9WasMFA0k6fxsR+9mRmjKUEniXO401zbMJt
K2R9FdIYuJrXc3OhjQTC1QRl+qlNWPepobomhoE0/1CrAdIvzroll1TWhBdW
jwUH+jNwQLFQ8autBEbZWspqnCbcFXr+AHc7A+nLZBZYrJJAz1e1Pb0zyPy/
zsJ4XT8ddwXGZX0HCdRKWYhOeFHw6OD2hzVsOjr5bDixe40EHhXPu599l4JP
8kbCt32joztNzqKZ9IB7j4smXlAwYNbSsLXRdKxytjJirpVAauei7MA6CtZ0
S2tzV9Dxl3zcDa/15LySj893NKFiw7tTKyy06BjyCeYh6WPcKxfObKTiJee/
2kGydHzfP5UqZy+B0OcKWvcPU3E+be4DFQYNo53SEoNIL9MUn8iKoKKHGW/+
TqRhFuNk5hfS9aOKezGFiuZXNjwNTaGhQu+EQEC6sN8qvwKp6HDo8fVOHxrO
JmKiNR0kQL+5ta3sFxWzUzO+vT9Kw/HhF/NNSC/fbNuqIUtDxY8p3BNbaBjq
vu7bStJXS2yrLmrQMD+P92P+ChrqxwaEryL93+KWsFJzGt7xLHpUo0XD4aS9
fjakX5hesVh+Ew2PPs6w9JGjYbt91QNT0ocovvE7DtNwrrN+qWY/FWM6qahN
+gaFuObIKzTs7A9ZgRwqnnlzW1WO9Jw7+V0/w2i4Ud4x7kA5FYOXUx92kvO6
ve7q10mvaHjzJKWv/xMVKydTDb+TviTh9BaLPBqemBZvf/cpFcv0Q9tjSUdT
i5hDdTR0d/rc8+wMFbmzNlQbke5Rk78meZSG6jnvukOVqGhwMGr5xDoJJNLN
j/bvpKPkqSB9dJSCr2fWtyeRfm9s9+JhTzpWHpv2zL2VgkdyNxSuJt0x/UjA
sD8dNylpDS7JpeCpAcfG42Q90A7UlxOpdOyab3g00I2CXx3evD1A1tunrXVz
701ioHStQZ/T2yasOXxPYxJZzx/XvV75JZ2B8rcnUi5GNOEz82NK1islwKme
felYBQNPCuV5kdea0NW41PikNTlOfnSrHJeBRfenMb9vbkIlHWZjOtlHB94W
HLOfykTpQ1vThnoasdDucGcf2adqN0tNrxxkopY//cs9y0asvt3ra2xE1rl9
1O18OXK/4HWoLr5bjwWvtxr6q5DjDA7IeOfKxrSzf2767KzH91abHuUokfWm
eSnO5SIbO/pNhwq169EeFw61kvvSxUWaQ8PkPnXXRnHL0oI6vOIVmmssT+5L
wZXdRjlszF0UaZTcU4sDr02W7Sf3PcWWCROLWRxMkVl7cWL3T/QnRMeWD4jB
k511oL6Ug1cNKw4Vaf3Am+HE0d5qMQSUXm+ZtoCHR5arCpKfl+Ftk82d74+J
QTGttdu4go9Lpje2vz1dhukvKav0D4vhUpdLpzuLj0rSHvteryzDtce+lz0/
IAZW1MCfWAkf5+9p+xjOKEWLuuNHL7mIQeduo+alaQLsg4kLpiqleDAhfXqd
gxiq2r+fCTcRIO/Qo2V7VBAvUEo4YCCGvKgJrSk3BKj3o9suuSMP/2YvWDe7
rQviwsfusxWESFh+avGaeIcCavuvr05dsNIuU/XtYhFGluYkdbNTYO31z5BL
J2Dan+ZNeVqtuNvgPFtV/RscsXRYS6G1w4vMiI6FHW0o2yj94IByPdSal7gf
fNYKrs+cf7lZd+DvHsreUqTBiWIvNVMyFzlsKCyUAQLTsy/bXGLQoI1iKkio
EsL664ccTNcRePj8mZmav2hw6trjArkiIUzseKO824E8107VPn1Eiw58R9VP
tclCsPN96RO6hcBPT9Q3vvCjg+lWzy4NHyHYTnHb9WYvgTa1y1mdVgxwMUqO
oMwVgtuGPU8fnyNwMKxCLuk9E4I2zHqYt08AvIJlPa6xBEqF+x26U8IEE/f7
GEHmh9adbf5pcQRm/aqkHWIwoXZi/tljawQwYDlsO/Kc/Bzf0lnSU1jw3WT6
2lEDATgdfWftl0jglSZNqf7DLDAImX6J6OaDI7fJyPQ9mUtTa7YHzGZDRe73
fENDPlg+i/Dank+g66Xkv7rXOODZq6Rt+4Q8d16+nnqSSmCNgY/a6wcceP8z
XDrMnwdvdBo/lNPI89a3xBCNJA6UKZiUUzx44Dx13SdNBoEW2VbuYz84MO9Y
mayzFQ9ExXo5X1kEClQvX/FU58Kk1b0qgwwumL6yKPtM5tLEWq+UsUIuDHZS
j/6aw4WwYo+nPh1k3nikJzerkfRRp2kN/zjkOTji3hWCwL5cwWX1Ni7MSNnW
876DPD+zt1726iRz7xOF/dozeXDCc13Iplzy/GyeCFvEBL5p0KM0uZHj8It4
ab2HA/pWnsnF5Pm7s25gZ+soOZ9Zuv6cKDbsTKu4FjRI4B+jDt1ghWaoiNlV
tNOXDcndl+bqDhFI2WeboaPbDMrv1Z5+O8qGBuO3Gfmkb3s87zdsaob+k9Ot
o0zZkJSu2ED/TWD/RGy8fmwz7EuRr2qpZYFNsXN+FZlL0xZf4DxMbYYubb1Q
wxwW1CXeXWBJ5pDnor+Z3UXNcCzDY87JeBY0XnYIfEF6oF7wvNjWZmDG7vnQ
eJoF5mGTl7qSeWZf0Le1j8z4cG1q7JGDU1kwcmL+ojAyL/mtzfn21Z7MWy6Z
Cy/2MME7YNX2KtLzPi7M5+/lw3ejfqE/jQkeb50u/iP9d8S4WNGfD3KThk+G
vGZCkeNY/AEyj914vkxHK5IPhR21tkFkXnsTFPT2v/y23/9szsI3fOjTIHR9
LzJBdnNtykvSvfQ/986p5sOqKfPWuwATlg0FRNaQrm8V+lCWx4d9CltCrPWZ
MLhGeJ1J+vU8zevdv/igoDg8rDaTCetE4v180tfmn93rIS0A3VVmz38NMGCp
6Uuz//LqUNAc1abpAjA0mXaljM2AN79Hpf7Lq9elNg2snE162+MHEaUMOHlV
quq/vLqN+/XXC00BKJS1d+x5xwBl98zgYtK5ecZyE/oCWBU29+HcCNK7Z69K
IX2SwW4bV1MBqJ1cG0i9woDUtKXi+6Qfm6xy2M9GAL5PLzSddCVztN3frcf/
y/mfHYg4ewHUXbG9PbiaAdyxr09XkL6o9aFGJdnPloKmeaNTGWA9bNf+nXzO
atuiCjsDBOD8PFcpN44OLoZWx8PJdRyZS89uDxWAt5qHmZo/HU4cdZtqQjqn
MX+0OVoAeY2res4do0OAlFJ0FVkP2DjrROk7AcgmNR2aaUwH3bqEk+1kXY17
yR3a2iCAdjfWn4mvNGjqHRn9SdZhaaGLtx5bAK5N8jzjRBq8ClvZsZz03edL
S3+3CGBk0ZmEnUE0iHqxuCiGrOfGTtrvB3/I783YTHvoRIOrkkb9dWRf3JZZ
6ndLSwjlUzz6vnKpkLoh67cDmXu1RHqhvmeEwO3QY/wdo4BiflPBCNmPVjOZ
FZOvCKFjeZTVTz4FFISfDvSS/asmyVQI8RfCzjqfgehvFLjK+tfJJ/t9/l7l
nNuRQjhHyXuhGkaBY2+tGt63kf07ebHSylwhXDlQHk+dR4HeKQM1BJl7c9md
6TnSIrjfWrjd2bIJzqQ31KnQCbxvI72EGiWCfMfwpT5nGqA2Ro2n85Xch+fV
u+o+F4GN3K/6MOcGcC6sqtpD7nv7eUt/nXktgs3DUqfiVzSAt034k+BcAre8
PbOmL0sETbFlFsf/1UOZrg6bkkVgwNLKLd+pIlhi33Rsv0E9OD7bprDoI4EX
OwvWhKq2QP91ui7jSi1s01kf+4rcnwf+XPxy73ELeGyWGF6dWQ3tDlrNM68S
eGSywRZeQCv0x12psTL6BqsVt5ZWziVzftAibLzXCtmlNUrNA2WwL+/GsTBV
Au89CN5RGt4KT89H0G8VlcHli6WbNikTWFDErI6MbwXfBaqzvjiXgVT2x+6s
GQSuvMcW/skl822z09ueq6XA7pVLsp/oQMXzipaM7lbQ8UoNsrqLsPlUwGkX
UQea60sdYOxugyUXFirf/pQHX65leVu87cDv7vpJIWrt4Jyz4JmlKBnWjx42
XajZgZTlR9penu+Aho2mPhH9mTjnk8Ul0bs29JV/EdJ6uQOGP573qzuaheuj
+5fkv2rDWvsc74XXOkAid6tKrjEL/xzoTAqNb8MlObsXPgroACeTV1XnPmdj
cUBwieajNvxUklOkF9kBzF1bL/098wWbAiZGZXza0FIjUNYmowPcAqYWzGzN
x2WeSkXM9W0Yec93mUJ3B/g+zzmXcLIET/vmXU9kteLR+M9pxrsI2LDZ6N2w
QyV6fzJQmPm7BeXePvC32kPAcWl1ytLblVgR86d9orsFQysX7rXbT4Brc9U6
t8JKZGkmTBe3teD3EXkNs8MEjNlFfXxjXoW7wzNsM2ktODtahVdxmoCAaeX1
QvL85fRKK3g8uwUDoSLoVQABOzjxoRND1XicXlUdeKkFVcVF81VTCNCzW9K/
JaEO61/u5nl0ipDzjOW25j0B1kMXZO8z61B49s2HtwIRmiV2hJ/4QMCdRdYO
Rcr1uHhet5KQIcKKLM+S2M8EqO5+/W/6vXqkqPimO1SQ/min4/tcAoI2d1bH
WzUgbbatX90rEdq+n+p1rYKAYa30w11aZC59sei+wFWEvFMv/L81EzCy6ltq
ZWcTvjSPTphbKcTDcRKz33wCfD7uyXOXoWDW3J/yzsVCPDFZ+bOukABLJ0vZ
f1oUbHhbJH8nR4gbfmVPOdVCwAvKJseFLhQUQ1w157UQndvuaXzoIMeppPLR
rJiCRLGU374AIQoPC77I/CJARz3X8EgkFXNynqcEWAtRx+hnB4X0fWff6Xz+
QMVb0g9tL5kIsUoc2xzfS0DJR/Nfw2S+kRK3Bh3WF2K6gZymRj8Bz80ah/xG
qaiWw1qzdLYQp7iZMusHCeB8yu9zOE7DywWhL2J+CbDKV7hQfoQg96VUCc2C
jv1vF4ifJwsw6Vdagg/pa6dsXVW/lcyXMzM6NsUL8MLCfi6X9Ehv7fGyk3Qs
2OtRPBAlQC1L/9fRowQo+3imxj2no8+02Mm2AQI8t379nvwx0qPPzZ48mYEd
NXHLnroKUH7K0a5+0p9aeC6o12BgVh9r1aIdAjwk3LtWf5yAgjSBZ4wlA60T
J9t82ihAFbOXVr6kZ/569FDxNAPNGCGTspcLUDGNTX/2373il+6D5XcY+Dok
iWJqLMARl3LrHNKH9qls937BwBcqWs/fLxDg2qh9B3+QTv8b66qZy0Dlx4cP
aM0V4LqDEfb/3VtW2av4ljQw0GdhlVqEggBNV3n0NJM+zVEr5WAXA5eKCurH
ZARo6Mhx/e/eUiZhF2dwMhNrWVZKP37zUX9hz/3/7i0J1+2KwZpkXipLvBfV
wsfpkxJv/HdvuU75MyhZMfHEF7+pLg18fJ4yYIKkP2EqHX/izMRySVzMzCI+
3nDvfvvfveWg/Vxv1dNMXB1bZYnv+bjYVvJ/95YHJz1zkH7BxAeDb8qn3+Fj
Uol0/H/3li81Do14fWFijXi88M15PhatbNb8797yzqW9t6n1THzKK2BbuvHx
yRSt07Hk85dseTAYPomFdk1N8etX8LHd+py+O7mOj2ZWfsk7ycJEg8pv/9qb
8WuRDWc66S+S1Ou9A1gIZTrqxZRmvHJyT2QqWQ8sZ78qozgWbozaLn+lpBm/
zGBJM4cJ+KyYuiGomoVdoZl1P+Oa0XVv9++u3+T/n5pUI1nCxp38p7v1nJrR
yGru1r4+0s+Jq8N72WjO+Xfb5zMPR4sWUALIPqq1sczsvsRFdv2zI/UXuHhG
9+qoh4ic79KnYexQLr7UtZFPdePiMbsKw41kP+4sNAsrecXFYGODzpuOXPyx
6/zzIbKvjZ6ot/s0cXHw96bNSjpc1EiuFUxnE9C78cnpx2Y8tI9ONeuo42CV
f6bJnHoCbN7LZF7r4eEbfyFrlzEHWwb7HPOzCQixt8iiHuPj0as3Z+zis3D3
uYb3eZkExAW/W193g4+5PqLEJ1UsdD+ur5SRTu4/U+R6i6P5+K5sQ09TBgsp
KXeHHnwk95MFbgF3yfwZbllRvSKIhS8Nny3qe02AwaOjBymzBThlZAEkG7Jw
3JCSdiaS7PcqraJ5PgJk6g2j6QUmqiU7qC87SUDasp5WXXK/MJLR5xuM0tEq
kZM7e6IDTLVuMU99EOGix8Op08coeHKNfgWvrx02ywQVMPXbsGhQvlOy8yea
jX5jPTjVBm3bFO84Xe9Aw+Gir8+9i7EzZqDaIqQF1OKb7sTs7URF9exJVxoe
IU8u9vz7a0Jwej7wdE16F7a6/Z1r7ZYNSy2c5LXOkzmwXL/JMqcLh6fcC91X
kQ3/diVlPHQXQrDz5/OLCrpwyXolpcumOZD/XnnBoZ1COCyr1yT+1oXezHWt
MTJfIJOTyf9mLIRZzNqZmowu/GlutzviYy6snhvqkMwTQGIUzVRxvAur0tKH
LccKwPnRtE2UVQLYN21Y03SNGMvYpSvW/yiBHR92BI4KeEAUtESoZohRmT31
w5YdleDtEJolVcuDqi8sJSJLjGfjrtV9uV0JShjt/y+PB5qLxzOzvojR/G+1
ukZmJaxa92+o/REPWs9KO1sWitG0bIoMTbkKJl1PHzq4hgfpctNFRIUY5QyL
CiYoVWBkl/ys9wUXjuXEUCZxxNiQctXBYHc1rJh0vrNmFwe0n2dkTpkQ4+BP
S4frO2uhMH7znF+rOdAht6hl9J8YbYQsX+XAWkhMOHh7hhEH3J8ItTulJdhz
t9PtTUYteF3p0jKV4gC316kwfYoE8zqU/mQo1kGJ1VqlxR/ZEOXXfVkiL0FL
2Q0rL9fVwaLFh9ybJ7GBGSPnpzpfggm5n6hr9RqgQrIr+8YHJriz1K2NTSTo
zKJpOzxvBOXUCxmrnjChK3oCbU0luHnFwx71zEbYN/qiYSSACcr2vQ8dzCRY
dmZzUE9VI2TX+dw/socJScdlxuwtJFhcofAr+HcjXLkdfZmQYsJK7gmVAUsJ
CqoCFwftaAKq/t6kdhcGWNwdmim/SoLDOnGXP8hSoGrH2YVbgQG9yRHcdNK1
DM4Y2GlSYKvxyXmfFjPAPmVSz7bVEnxaH7+lyoICF1wyrxyeoAN9ajPzKkhw
W+6z+qYjFHjw1yMgIIUO5lc/V19ZS47HItEkvYACavWe5l8j6UCJ2PyxlfQ3
clMb1BspYLv46+3eG3SYRy2qd1onQSJamBPYQYHc29oztzjTIVi5hiO3XoLK
8yPt1s2mQuS1Bs+SYRrY/F0qa2ovQfs73on3vKiwys4qtkFEg4W4ZNCT9Kui
GYyfd6ggk/ThAecnDeJ6Ti18TrrQ/rLhzGdUyCjIEgrJHFK15aKDmPQxy6uy
tyqosALLt/BCaXDO1dB6moMEz1VdDUknc8ZNaVEkxZsGd57+OaNDuuNxJUVe
PxXEhZvzvx+iQaofS2BKuor/WKzMNBo8cV9fme5Ig4R51U9sSKeXiOcbaNNA
LUWxNNacBkZalQ9XkW4g++yx/QoabDw+/OG6Bg3MaPXlK0kPcMNxty00GE9f
+3CPLA3SF7WtNiE9bKrajgtHadDAXn56WS8VsqOmjWiSvvr2/jB/Hxr8OKju
KM2mgoft2sEppG+/seHtvYc00CVgSf03KkywI007yPm6Cp7Fh72mwa2Cyxpu
sVRYMBx/Nob0zHwf2aB6GrzfpGWhfpsKvsOnzx4jXd448Py1NhpMPrvKnXaa
CpuHrqUZkt41eTjh5Bg5H5aGme1qKpxOeDiQSK6Xd7SVnaUBHaaZXR//2UqB
yraAyDXk+iYaVPEek/nSpWCpgoIZBY7kKy62I+uq8MAZE6clDKiUWln5ZC4F
HqVaXIsg61Dp1myvkvUMuJi7aOF8KQqYbfvEZNtJkFnEX7DsAAOm/jHgK9Y3
QQzdp26/Lfmcq8PoQ/cZ8LehzBDPNsGGeu/Hw1YS7HY/m72igwFX/xYoLEpp
BMUR46/5ZN/pDMuGXkxkgs6MB5QNcxvA6/70XKd5EpT5Nhk+zmTDLKdT6ccm
6sH2Q0TxqzkSrGe/Kl+nx4bMpWZFy37Ww/lAFVGvqgR/fgwabLRhA1cmYt7H
k/Wg9lfq1hVlCZqP5JuxT7JhXGnIc1VCHcxt36mlM0OC+g3S1yNL2aCc96+8
Ylot6AyqnBobFaOhckJBzGUOPBv5pchk/wC5dfN211HFuLp9qc+PRi74q3vd
Uv3wA1J1LP33NJH++tnf321c+D5Q/9bpxg8oue7BYtSLsbAw45LmKBf6w6Zu
f6f+A0zkvQ0rqsW4xclIdbcuD5y9mU5qblXAIkpsdpSIUXNhTsa5SzyY3ZQK
DE4FcG4Fly5IFWPxHu9JG5WaQSVxw35gfAPNY8TKjGti1F2/0uj0Jj4EN9r4
+wd8hfJvwu1fpMX4eniBxLpRAIHXDE8Zq3yF5/Z+w7P/duEJPeutpzkCOKeT
odKQXAAbFL1OnhnuQoN36mFP2gTAWta+RLomHxpVJif86+lC6fttj/gjAlCp
T1WVVc2D6LqTT8o5XSh/e+45C10hHHR7+Ds3JRsy9/r/q8rqwpVqtSX8i0KY
09as6xT5AVQW4KO8g1148/TR1BUzRUAPHtk/JycVCgtWDCnv68KXWY5lhWoi
eGd+wIvNfA928U473Xd24aSylj2rdUTwyOXSik0670C7eNPfvg1duG1xYpep
hQhKTxOvGj69gVfjERs/mHRh7dWbZyj7RJD64t+lOzHPISGleNXLf51YJZW7
cwaZ53VWRh9x4cbBQMRKad+RTlwa2s6z/iiCjzm3zmoufAo/Ny1mOw104ocR
m7wjOSIYfWU3EpceDQp6fRR2eyf2Dxltf1kpggZjplXskzDwEp/TeFrbiaL6
y3kMsQj+Gtw7zlwYAuO9NSUWlZ2oyZx+njEogsa6GgvljCDosey9X1nSib9H
3hxq/CuC4bg7ko4nN6Boh3sUI6sT5//u52XNagFxz/wpdhneUHYvhbYrrRMH
zlt4xs9tgR/2YQkqsWdgOz52qHrbiZb2j3RuLWiB0bOPorfGHoDQRMPW5Ymd
aGbqIuNm1AL//57z6ugVJ7P+e89ZNa9G8b/3nP8H99zgjg==
       "]]}}}, {
    {RGBColor[0, 0, 1], Dashing[{0, Small}], 
     Arrow3DBox[
      NCache[{{0, 0, 0}, {
        3 41^Rational[-1, 2], 4 41^Rational[-1, 2], 4 41^Rational[-1, 2]}}, {{
        0, 0, 0}, {0.4685212856658182, 0.6246950475544243, 
        0.6246950475544243}}]]}, {{}, {}, 
     {RGBColor[0, 0, 1], AbsoluteThickness[2], Line3DBox[CompressedData["
1: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
TBzbtMm0k3StYFwtQ3BRS+xPptMUA3sCSuL+642ZWuvTp01wMfbV/JWL+xjY
Vs5i/7fefRNVb1SCh3PnlTEoDQy82vZcjkZ6yu3S50eleaj4Urs8uoCB7fWK
5rWkf9edu65NkYdnt50TmCcy8N8WcMgn3cgugGWmzsNQg9o9gisM3OCs6JTw
X3+enhv/RJfcz7M3S972ZqDszRzrc6SXHT13SMyYh1PNC+X0dpLngUBipT3p
OsFXLA8CD6N09hscWMLA1KSVxYPkdc6M3qYhuZuH1yNs7c8X0fFaZsLsXrLv
+SmYbzc5z8Olz00tvifR8U9W2tn7pDfPz3a7cJWH/+Z+yzkcRkd9+b4GM9Kl
z273eXuTh+d+XVxnZk/H/vKTO4LJeVDaohSsnsJD/29aZ14JaJigqx31huyB
jQYhys3lPPR54bYiTJGGyfI44+cwAT/flyYcmtOFmua/V70ke0u+c/gZS9LD
QeLKIdkuPF1kqljdR/YZk4iGGz8IKI9bsMl9aRf23GouH86nomHh2L4Z30nn
ZOyy1evCR5o3RxbaUdE8ifq5iNynVauW7xh06MKDDRsCTwZTsOjEGYOfvQSc
fczk+zzswi0Z+zYlU1vxRQD9l6CF7JPxo2V6y7txXec8iaHiVqw/EHDEqZmc
Q+3Vam463UhfN+2jeXIrHv+0pLSEPJd+2447h6/rRow7ovjFqxWXNnqsPlNP
QKFcu0b11m68vIBy++VQC0omyOlGkOeeuV+f/CyfbjxucetGyKwWbLNz+nuw
iLw+C6/OvZvfjZ/vrdW7fbIRs5buHqi9S4BzC9M/ZUMPytYFtwXMq8FPReJK
KYYEzOHGHJXf1IsLLm2UmUmvxsaACeLqWvL7l+Koh20vEkplqvdSq7HXvSXX
YzUBNiXZwS8cyPUzl/cnrqnG+wX6ayVXEvA0LMRZ2aMX9/5TeXbGsQq7h34p
LFlKnmPf7unQLvai2LP9X03iK/BjmshAQYwAN/ENpTuLejE5aaXuer1SdPnw
525yjQA6hLQd7sv70KvRX/qfdTYaLM+k/NwogNSGXs4TYR9GNLx3Xfc3Exw+
52gcHCGfv37fYszXC3CjzBa9j6IssLG28Zk51Afy54/pK1sI0PFVsbo5Oxvm
bS8PTxf0AYvvaztuJcB9hu9Oq33MgUevLpiy2vtAau1reup2AYrUF93ZvCEf
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
       "]]}}}, 
   {Opacity[0.4], SphereBox[{0, 0, 0}], 
    {RGBColor[
      NCache[
       Rational[1, 2], 0.5], 
      NCache[
       Rational[1, 2], 0.5], 0], 
     Line3DBox[
      NCache[{{Rational[7, 9], Rational[-4, 9], Rational[-4, 9]}, {
        Rational[-7, 9], Rational[4, 9], Rational[4, 9]}}, {{
       0.7777777777777778, -0.4444444444444444, -0.4444444444444444}, \
{-0.7777777777777778, 0.4444444444444444, 0.4444444444444444}}]]}, 
    {RGBColor[
      NCache[
       Rational[1, 2], 0.5], 0, 
      NCache[
       Rational[1, 2], 0.5]], 
     Line3DBox[
      NCache[{{Rational[4, 9], Rational[-7, 9], Rational[4, 9]}, {
        Rational[-4, 9], Rational[7, 9], Rational[-4, 9]}}, {{
       0.4444444444444444, -0.7777777777777778, 
       0.4444444444444444}, {-0.4444444444444444, 
       0.7777777777777778, -0.4444444444444444}}]]}, 
    {RGBColor[0, 
      NCache[
       Rational[1, 2], 0.5], 
      NCache[
       Rational[1, 2], 0.5]], 
     Line3DBox[
      NCache[{{Rational[-4, 9], Rational[-4, 9], Rational[7, 9]}, {
        Rational[4, 9], Rational[4, 9], 
         Rational[-7, 9]}}, {{-0.4444444444444444, -0.4444444444444444, 
       0.7777777777777778}, {0.4444444444444444, 
       0.4444444444444444, -0.7777777777777778}}]]}}}]], "Output",
 CellChangeTimes->{
  3.6769377624630547`*^9, 3.6769378022936664`*^9, 3.676938072515317*^9, {
   3.676938105535824*^9, 3.676938117258504*^9}, 3.676938197529737*^9, 
   3.6769382324777737`*^9, 3.6769398328710403`*^9, 3.6769399862158957`*^9, 
   3.676991410579714*^9, 3.6769937772160654`*^9, 3.6769938446071005`*^9, 
   3.6771057105902805`*^9, {3.6771057907803926`*^9, 3.6771058144304256`*^9}, 
   3.677449678009536*^9, 3.6774529312576113`*^9, 3.6837650944332943`*^9, 
   3.683765728952586*^9, 3.683767108768507*^9, {3.6837671460676403`*^9, 
   3.6837671621305594`*^9}, 3.683767328304064*^9, 3.6837673998571568`*^9, 
   3.6837682415122967`*^9, 3.6837682899530673`*^9, 3.6837685870487328`*^9, 
   3.6887863292253547`*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJycvQeYJVW1BXzfvT15BkcwKwYExPDMgTBkhihBAZ+KoiCiCEhWkCxZwsTu
mc455+6bU+ecc/dMTyQpQVCf7xne/+1/7X3OqTq35zb83z/z7Uq37qmqs9fa
e+1Tdasvve7uX/781uvuvuln133ygjuvu/2XN/3srk+ef9ud2OT7D4/nP34J
e+qTHl4mj8dMiB555JFf8uQ/6KyzzvJ43sYm8tLCwsI9vPQf/JHH86ba2tLS
4vHRjTfeSM899xzPPfZOr/OyZzXv5ezDy/zPbMP8busrf5Sv+PhwZhePHMa3
9IC8B+97p/XtV5bupI/mWSHTDFk3ZwG7y/ruS9Yu5quw1dYJ8Td5TY5gH/fQ
csddq49ufVuW+bLsBg4sObhuY4PebH/dHOkO6+v70p/7Rtm8UjbZ//Qut1st
7FnuCo5epg3dk3Yb80vOQnf0+3UPWi2gB83hbrMamLF6y74UrHs+mKYVX5pt
t1rtTS3xum7vI8s1JSf0a6uBifT9+jH9FW7TwDDDatT03S1WU6PLdfDH36Ex
c9yljQ2nh8un0jS1wjmu3cBg+gv7tNWAOb+VaXrrV1ZTfctd2AnOB6ucpZut
L/akP4eTnJ1XO0v28TrTHY8R8rnUL2rOmu67yWqiPT0u/tNpYI2zZH8tmf6E
v+TsvDYNBn5hNRBbrqu+Yp2wCTJrLAyYbXZjkfQY+HqaptY6x7UbCFp7poTa
b6ZpYl0aFPzcasy/3KWdnMYX65ydb7SaaEnfvZvSHNk+G3OgG6ymGpfDyBnv
0JhNNrux+vRoOTtNU+ud49oN1Ka/sHPTNLAhzbbrraaqluvmzfqLNvU3ODv/
zGqiYsnZaK5fmKaBo6xt5kDXWU2VLoegi9+hMRsIdmPFy13at9M09h5nZ7uJ
wvQdfbmz83ut7jVN/cRqIG+5c/hOahOy9FPrizlLjqy/e5Wz89HOkn283elP
+HvOzsekwcOPrQYylzvh76c2IUvXWl/ckR4F11hOMtS3z8E0/yOrqa2yJX3W
/vE7tGfzzW7vBevULL79NE1T73OuzW7gufS9en2aBtJpkx9aTT2zXP/+PM0X
3bO5xmriqfTQ+GWaBszZ2Hz7gdXUE+kv7Ffv0JTdyXZTv1/uwm5J09gHnJ3t
Jh5Jfza3WRdhOGaLN7Ptv6ymHkx3NoyfO5ZrTHb+vtXE/elRc3eaBj7kNGCf
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
AVSxWVIGJM3YMZIt04fan9yXQRc6IxZmIiIePWOsTWPM1ZhQZN6aQzdGbyfH
nIVvL+CTx2uf+ixTRi8X8W3zseFOj7Tt2/8Vfvj9g9BaV8Aimcm4ZTFShBYh
RqgxdsMJ8bjvcPyiZIckb/VIwT251YwY+cXB9in45revwOcQrZ/84wUYaJvg
zDA2VI8yt/Ct0O+xvFGf6v5778fLudK2iAMlmXpFPQRZ7s5jS7I+pqyPKevx
UdYNtcUxyD9eAM8+8jw88/BzTFhlXo31iU1V2p+q0HCDkkKezMWSDFe1ihtj
xj4REcsVcStAn5h3shRFroyncT9sPWC6KszVvD9Wj5iIj8FZ9ojZ4hEPHRNN
4zgjpQKzcXvM5xELAnS5u6rK7LhEhxmXwAqsYO9hOPbEczYdJLL60COSpome
NRJdnqYZtHCNUJShmjZiNE3QChNXVHCmeMPNVIOJpnUNKlqKF6I13YNP8lbM
BKuEYiVKhgANGKzIHs5wdoFocQE2S2uY1jSXOtOUNyS4bkpAxXSpjdqvR89o
jaEoGWJIrGUIV2Nzhq3tBAu++8Ijnk1cKagI87vpaOCkJejjH/0FPL1rFMqK
nqEvHhJ6N5OXlK+iNnT+WB4kVbDmekblWeBaNrQzps3M/QGhagKJykWS/vFc
FZNFcyFDHVNwN5L0l0jUP+LLwfZJ0w2GexOPw+dQsH4+/bgdI9xJWOEf3T8H
P+grw4x+WbRw9TtoMVa46krroPBEETy/aw88/9gexqqmsFYFzE06EK2qdhvA
C1YOWqWkXo2KVh37xrJ8R70QrXwsv86henU0d6en6lfSZBtC1Z/QPamg6myu
usXDkE+axW4xtYlV7TaxTglZNts4I0fJp7jFfKKqDNrt9IQ3QkuaRbNMObuf
R6qk8mKnWC1O0VLFDSysvOpbmSrPKbJouVQhVCJY4229VrDGO0i0ONogxaIk
kDdKTXUNM1bTPOM3zekgq1ZfHBJmMVrjDBaiNDAeYaoyjFwJTyJYaJ3mDE9Z
zNPQWD98VsONz770GRgeH8gycsXyM8uIRMzjuJWlkMDzHvd9ssbnnffNE2fW
IF585ElYwPfRxyoLlyx09HKoYwZaYrnQ1xojbIXkrczdfLQNktffwWv+XBnz
pxWi6Y5xG1oM41aYxB99T0UTPFQUgxFSdXx7uHMa7r77IvzlX78G30IZG2qf
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
Og5kmI2ZmL5P+jK9RKr8Ua6rSTh/MuASuYpo7axZ/E8OiHIRz/xd5GwI0EvP
j9LS352kRQtP84G8ha/a5tGdd56i9WuHoFoH9VoV260UG4L/Bxw1dPzQuO3f
Z2nSPmPa+4wMrCux/iPvn4F/LV/xdyLUWG0NdWzdDKFuQwzYQT/57oCI9Mkl
TvIW7Cbf3jxTpDscj1OweC+FSvdSuKyImraV0VPzG+1063c6UK1XLmimVlTX
3upyROAD1Feb1qmqrjWorEZ1raeDf/6TmuB+9jOUqqqgQaSBQUeLqdMk67ST
Vzt17v8DBUqeptcfWELvXf89OnXfIhpGVR7q6TJ0yjKlhmgO3Xvox7Tk6OX0
xOSt1BDbxRt9ngwOw3aWKKvTx0XVJ1q1G2UVv/xUgPeuUtBoivUp9VU/ik5D
5jVh6tE8sayrLN+ZLKzlaKywPveW3jILm+lUZrbmkQpzGmZPV1Qzs86ddsxC
giuX1oBt2qBX6TbktepW4kGWodugS3SLJSp28b5coEcK7iBki2Vn7eLB14U+
KuFzoqGLIMYegnhP0UJI984FJ+nuJUfpQJFfpBuDdKOQbqSLpVtHgfYaSsWk
mTOKq7WX+/f3U6+uvvJFsx08ul0+81+iWt5OY9XWv7yLPvcvx+nfPn6Iyp4r
QnjdJaq95MgXKeusnXKbl1NwfwG58osof0UF3XlZK/32fxy08EcOlNZq8hWX
UayqFOEVkq0ph2QrINkDItu4lm0/l1fIdgDd3luf+XeR7KGHHqQBdG8DkOCA
oxly1bLtULKNNYGOvF/T8Qfn03vXQa63Xo8QwjfBSHU7+WIDdHF97hY6ENsI
uV5LS478CHV1KdoEB9dZliyfzvB6+IF3SYd86YmD1NmU1NkU6mwqIIv/br6h
XUquxoKUtZBlKR1nWXVs1F9Wrb5GeEatlFu6nDf9fE/a06cVTNUlcc/E4lMr
7e1zWGkstx7+KiWzaXJDLYLesJyU8PLqpH6ssLOLSvZE6J67j9GCBSdowR0n
6M8PTJDfgXTa3WQqLphW3OdMdc2uM7ucTp7eFd0pwvoyHRtKoRvaRi/fX0Ef
Ou80/e7qWnLlZpM7byd583PpksNfpI+/dj5VVK6m/U+X0H3XNdCvv9VG87/X
RCvn11EzyiH7dvRAMUUrSyAsiKu6TAvrgAgrDu9mYfU3VIuwDj74gKqBEFby
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
lGpUokmtKHSP4yBUFcdBdI/OWs7MNdWdcCzUo5WlXP1T4RQYtEpT+nqAqS+m
yADDQLdbZGgirTBqkl7jG3bkvLSN01/mmckpNoh+x0asN54vRgd4zRXaxgFt
VLz1Of7C0ME3chm2kZPlJt31ph56RSecihmrzWz1z/tL/JNS/0zSOxoJeCgh
eeOfHPwzYfyTRd0Z6w3Jtu6gXr+899my862pxzXMh71iZHfU7/FZ3TvWOUGt
czP+fWbXR+Wa4KlyY+aTMi9xmQRafi+B1julLfAHCbbNlfbgXZLaMFfeOPGj
8vrR5XJn64nyw82ny08Gz5I7YhfLQ+1XyJZbPydvfeVT8tItV0m+uQp9ThOi
2bNOPqLWYW8XC6L92thUI8HHFsA2YSeSJfZJMzgxZeJUtegeqsrOB+ZR26h5
Mqb0GPNozemmg9RA5To7sfIYCw2aWUonJc9D+h+FjZeGtTrQRyOen9hw98Mm
o/3qh3Lvljqgz3MLC0ifNiQVdj3Z2DXL8wNrV1qLimsExwyTNIIxA7+6N08z
DMZgiCgMATP0d8g4CspYT7ts62qTnehK3nj1wAUl66bp/fDeaUvJx7Tn/c2L
P5Xvpz4n18dOkeu6Py7X95wqN/TCG/2fkJsGTpP5S5zmY+rT75HbwxfKwpZr
pK3pLumrXSAv/vByefOC0+Qv37tQco3rJdteLxPtDTIRalI/5DocP+TpB1NK
NmKVFnx0PkpJu0x2hvg5tESYE7Tlh6lUtNwzQ7mZi7q9uajHtCjWXJTWuSjt
mgImyGg9qWAl4eSjdaTbMYQGJ6IedUOFwudlr2MI594IU3+UFyN99ID6Q2cN
91U7BzmfpV4b7eUtrQrFNY9u1E0vmMjQE+yoRtPcSZrjp3hmaoakZ4rJIRof
luCvs8IUeTUFot8Yo4/GQHeCKjGOmeaZiY3arl5Ywpv3ji2pCaXTzftK3FT8
eMmxMvHWdhkqhOX+6qvkvnWXywOVV8qDVd+R+TXfla3nneB44z+vl676h2Vb
4zoZq1ku+266TN48/1R5/etnys6H5qJprZVsW51kg3WOR0IN9Ae/S6SjGXU4
F2nRqWYU66rgIw/AG0GZ5HTDZiURKmcHW06HoFl168Vk2jQt2qxow1LmdCyz
SqacJOtFin0up5yDTeJUjAGt3Dr7DLAHGFRstMmQF5xuuN4YZq850usCHyF0
LSujnKVGzeTgrkS0pe2e47UVinyOi3wkqdiL6Il8EsjRmA7FFXsB2POmHuSA
fQLYs8A+jnow1t2m15ggvubl/rE+lcFm/QFvIewsTT4qr724F6vPsIysexwt
6FLZiEbildNOkf+rwMHMuwMt6GrZXrVU9t5wqbx63qmy/xtnyVML7pSxlmoZ
a62R8cAG0K116AbdCtAoObcCgO4oljVtf7ofc0GbFBjxIKh2tvOr8hKhaScF
B3CsrDgrxM3MoLC7ExXkywKQ0vznLMBFMYgiMua6y6R+l5IlSIdvN2+5fLHR
cA/yfKSnwsU4ggdGLIyzzVoCHM3krqG5rPWd27DBGebRDCdZd5jJms2diLhM
KlLUNHDFuecN1RyqPL/BJdvbDqJB2d4VkJ3bBuSNVw6UXezTP37IZyVaYUH+
YMlKlEXfSejj5e9v/RXKdaJPXCnjf/yt/OPII+TV006WrWsXybZ1i+XP131T
Xjn3FNnxrfNk25/uke1N62WsuRK4q2S8tRq4a4AbyIMO8gmT0LkwkHc0yQj6
zraH70Wx5wcHC7EAP3ceV+QgzmhnzQ+hrk3CdZOpDhMRzWnTBxA7MMfs3O42
0wChJ5zk7k1q+U9p+U852d2vwYQmmoEMn08PDGboAe0KOC8MdRM5q/QIL4aZ
+CPdRKjPIfiRLu8e03ck4ywNFLi2dpzTmccpkmadGU5wqE5tM+Ie8UkkMIFD
joEosR+EPCRZIB9HMhP/M9kRreOX+HR8H3wb7K4t7N7PyfKPyP6dO+Tp+fdo
vd570Rdk7JF58vw135BXzzlJnrvyAtn60F2yrWENavhaIEcdbwb2lkogB/ZA
NZAXsReRNwD3agk8dA/m+GYilwIjFignc5J3iGOqbyd0VnG+/cBEn+JMn44Q
YDpKUTNRh7qT8F3xCoO8h6KCNF+GSBrOKe37mGyKeiDNNQN5D2YcwgCgQWcM
dSGxhxVhF6s352C3DFdYZVg7DIOQDuHOh5Cs4MdjHoySH4LHnO/nbJQDwQmL
4FgXzn4kIS+/sMf8ZuXBldglaC/8bIIf9unWnMQ9Sfgpk/+dM0teOusk2ffl
T8hT539a9lx7CZJ2ERZ6K2Vr/SoQXA2CawxBRMt6EKw0BKsNwQ0giMQN1ctI
7SoJLJyniesQbAFBREwpAmLASV5gnGQkmLzJED8WhuSdSnWYUJRAF2GpZvfW
FSM+fQmzBwW7l5FgKEtFyf/ArJnLjB1IkaIhOUimgxn+tlmGSJTpcJq39B4J
6TqAOah/1zwc1uKbPEJRcotOQmToOpGGGowRZ7RcKR4pBWRhvj8MjiGNid4g
WGJaBccsbu9ysvEyn6aq+DVN9vR6nE8KOu32KaLv1V9xhbz2XrR055wuoz+5
RjateUQ21yyTLbXLAXEFIK4ERIBsxKTbtFbGCLJlnYwbkFk3FRVirSSXLZTA
grs0FfMdjYDogCxEmx2Qmo6tHkgHooIkR5lKhqBKih34VBogM4yIyzBKhjEt
uHGHY49W4t5OPp88+7xgPnIq7k8qUuJMGqzEMqgdD+8OWjGkeTyo7ftQmvfN
ddpDPJwyf0459xSxQ9vrnjjN8q+krA2g3nfpxzWX1QH6jBhtwNAuIFp2NByB
yWcgonYowA60RF4t0S452GAClsh2t8pYplmeNvPy5R5/fycc7zVaJe843ODm
M+2AnP77yLDsm8zK5toV6L0ehx2WypYNy2CH5bDDCmOHVbDDGtgB0bIWdlhn
7FDl5HWwRhJL5kti6QLJhepgh3rYoWiJgm0JY4dJRmcbJ+MgX/lPttMNMIMb
yO80IhN2baFlOULVulCquxnQsSem/iCS3rjJdHPdp27pS9AQCa7CmPODSbUD
9jjEu0Nab/kUw4hP0YuY4mF1j5DRAJoEcCGfAtiQT773YD7j4MP0fem5nTqJ
XumReb9PBtuF9yPW4we/dn+yvI4GeRKKbFy/SDZVPw44S+WJWgOogfm6EnBW
O3Ca1xg46wAHgNqqpHPJA4DzIPJ1A+DUAk4dwBhAkUbAAaBokwMoBkDxVsBB
dAJQok2mGMkgCVHOVDsJkFA65BBKh1l1Oxw6XCRHDJ0o6fCa2/Wo3xVNzFxz
cd1Hrfu1QvYjawY0NFcTmDUHE05SOak0qE8bNOXUTa8yF9tQrMLDpk+MkJ3y
Yw/Wwd8TC3M92x9ShAWkVx74iDAHbBMGIXHuRuVlmn3X6nnc9td9TcNez9ow
Tyh5nDnowDxO/oH2d9/kuIwDxsaqRcg2A7RuGbJtOWCuMNm2CjABtWWNgble
OhffB5j3y0SwGjBrABNAwwDaYYBGGgCzkX1etIn/rS4GoPEWwER0AmgiAJiI
JF8XA1LKwrRLaWgnFCLKsL4rA7JdHSYiFlXNwx4mRq9e8HWSPkrfFwe2/jjX
Hf0gM+BG3LkeZD8zoPD4p0EH6GFMtyI3PhhlMxUxyKb6HW684G89EloBwPIG
Wq4noOCyXQQXUHBvvnLg6pLuh53M+yyWbjUst7id6LNscbj9q8NtKitZJNCm
6sWyBdyeqF0qW8FtG7k1rpDtjSvBzOE2Dm7xRfeA2b1IwkowqwKzajArcssb
boUIA+yijVyxNPHlqHizYpsCNkQ5uRFZGxMwSFDtlJkZmAmZGhl2mXHW7HAT
scdEL681LXqjcwiMaRdjnsVcIgMx7x6ZDjhJFOUtvccKGuEWOjjmqinUQjeY
WsqI3w7TrqDQeve2ARQCYHKANNHdIhMANZ5uRNGNyV/27r7GpzK+921A/ZsF
1+1ynI9tnHAQqM3Vi5BcBLUEyQVQDcsBaQUqpQMq/tg8QJon2da1gLTeA5Vz
QYU3SF5BISJ1DqioggKnRpmMNZEU86GzhYwIKhmgUEnUzBQj6ESa0c7kCukL
CSEDi6uRqW7nEoL2aGiCMQH4gSnw0sIJfn1RN5gXiod3+zXKvL8NFP/GqupU
P9ZBElN2Ax2kH2aihvife1AMAc0EurPeIItIbxtfHwG6PNDlgC7HHMs0AV+D
4nvp2Scxz71Vdp03z7nk7AWGTe6kEtrFT3AdXyQH1TfXYFFRC3J1S5BeJLcM
5JZL7JE/SOzRuUiv1aC2BmXRITcRBLl2kAtZ5Do2KLmCRw4RawA1lsjJeBOV
QJ6BHdC50VrmMMRjqYDDMN3m8MsE9ZWgdq2O7QaiiW5GmNfcsifMbqTjSPBx
SxjkVl5exmibynLbF8J4SJkKV3sECzQvMVn1BpRBoacVHBwGua4mcGiU8VQ9
Zr2o7BobUA43ehyKX+ZjT0wnW3njdhm3lOYNlNti1N9K9RuWSsPdP5eBNfOR
N8id5pUHqT/Rtg7qr0fOVEJ5h0A+XINw1TcEok7uTDJv4o2qP86xs4kNYLOu
yTFLJTFLpRRBKlBB5StUdrZ8QSO6Bl+J0QsuH3qoYi8XhbiJW2ErQpScD+tF
aJYt9xTatynIjdAMY12F5hVUHoHupyfAPOhpZTlDDhSgf97on4P+E8gD5sVT
m5JuLvzQSgC3XzjGF8bHp2vQf2RqIIm88vxu2YnJcxu8/0TtYqmf+zPpW/UA
cmEpaCwDjRWgASKtq0ADVAJrQMMjwpe4Q1U4uXwYVDpqNCdAhB1CHb9hO1YP
EA0GCKJTUyPRRBESmIKSjBb+DZdMCUxHaUbAiUxAPyTEaamL8nVrT9Hdzlug
wRdYcalSH06F51Bh3tXtelRiBKh3t1RQ37LDpQCF85bCWbicrt8zPoiZ/aVb
fGZ2f4XdLwCym2rndZAPyev798qLO7JSOfcX0rP8Xlh9MQrN4xB2CYSFuM3L
IeyKorBtFHYtRF0HSSFuCHYPVxlhEZEaCLuBwtaqsHUQtN4EBO5sULc3qrqU
s5mzfAryplB1NDh5pHmR0QvO910BOr8N0nW30d1tKpouiAGhW4O2x2UFJUQ0
M+jarmZWb+iYzzAaJQctJ1J1kk3Wyo6hiByAY9/4y/6y23xm4KN9Wly7jp9a
8jhdfJupJI88tFDGhvvkGXR4+WgtpF0EaRdD2seNtMsgLeRtXQlpIW/balSR
NZKz5Q1XQtoqR9oOSqvyQl1ErBZVhPoajTvrVdsGatvo2TfZpPpOpXR+TjVT
XU7SmRbWlFZo2tV6GKVjo9TCW3jKZFcT3/2AagUo5gRWSczzNFwI9SaSG9SZ
e8YH5LX9f5Z//O2tn3nucz44MctuXCzRTivxI517q5n8rAlTE3//k1lMQ83q
w231i2R7w2IZozebl0I8CNi6AuI5Ak5QwCAEbIeAIQgYNgJ2MKogXLUjYJSx
gWLFailRvNaIWKcC1jPpqWKykY+m0KMlEakmFbCJAjbpCzXNvGWumyFfpll7
GtyF1XDt3NPLJudvGR0j00jpm/QWdpPhbqhvIa3BlzXT9Zhd89A5l6qVicQG
ySaqZcdgGG7dIW/Crb/0xD56RrFLf7mlONf5vPxZ9gF546W98jTf6IRIW+se
xbz3GBwL0Zse90TPti6H4BC+DaIHV0NwS3S4Ng/h8x2MSiRghIW3EK12dI/V
QOcN7DtYHyY7IX1nXTESiiBRz+ZDLxpYbRuoeSMvGiq8W9g63TAHF/U8Pdiy
kMb0muIA+VQt389Egudg04lEDQWVnaOdsmd7P+z6PO36a58p6iijpW3Dopal
/7msuDDy+c9lWEbRwK/+eRf0jNE4WMQuK+rZDD1blsDA0DPg6DnRtrKoZ4gB
TcProOc6V0/IyYCZo1WOqLFqR1QVVsWFkhto3M5a9uJ6UccVbh3tW6eLXSjt
hBq8ju/nKg4YDregookksySfBK9cogYVNgcXTnRWaQXYORKTA3um6MY7jAj2
uyRHWlJa3y1jpHR///Cf3+s+eBTni76OhS1fkFdf2C3P8A1ZnOq2+kch4yLY
0pFyHFJmXSnbIGUQUravgpSQM4QIQ87wWkiJ6ICcEcZ6SLmeRxGtxMkVYlVG
TkS8GlIyaiBOZw1LQg26UKhwlOShQr4THTaVYMTRdSOysfXyZH9QnhrGrLJ7
Esq8WPa7kmLnSWO++bQoyWema4RusHRx//ZuY1fXYvufHJcdqFQ7uCwJYJHQ
9Bh0WQxdoE0rtAnw5+ezbctBeSIIfdpXQhvoE2KsZoMUXoN95DvWIKgRf5wI
KrFpiq6DQoz1DK7NVbRYJW/pPcyw8UpszYtcnPdzMXRfjOha1WQnNNmztRvJ
95y89uJzTMCyuT4z7hG+2pxpPdOdMm70kcVZdx1j7LJLXtu7W3YNx+VJFuVE
rSNLC2RpRQRUFoiCCC6DLMvLocsKDJkLQZ3wKoYqswp/6lg9B3qsgSjRtbMk
F12LB6JrwHIiipYowlitbnh6uEN2DoXlqcEQXFDA2T7Ls73XOzH7y+usrwcz
p/pZn4Lt5wD3XUZ1AE4V2YFjxQnDFbtG4vIUG3K0R4ydaOIncE7jAbihDaet
wdNWVwSXVUi2fTkuQpAgG6IEuClP9jSjdvHDQbycgw68XXZvSSs/J56VN17e
t9CnkB5mnaN11OYc3f+jYhfS63zO0X2B440DLyhKnh3Pcc+R8tq+PXjgtX3P
8hb0/WvZEp/ycZjPoOYY3J9UtXW+1ufpgyWVqnRYd1dm2C9Ml8VX+4w95JMA
cyw1S8Y+u+RQeMilL/Dx3ohntTnerXdZ8p9Tcuo82O+V/I33Rr2tZ/uO8yXr
8N2svMpnnI3WqbsGqfA5dTPsuT5kvjPDsPapV/g8zwx7no/prvB5+iafIzPL
KezFPv/zSw6AB3q5z4ibPfX8x/nKdJ651GewLd5gpkDigXfxGWYw+5Nn7kFd
5jPOE5bPXCiGsI7zVR+TXOrte2vJqVNMe+uv+Vjjm97W2/TRWZ7E5suUzLZf
9+F/ibft9hI8PC6z4Td8CF/sbTjmyKX7UQC6zSUlJ8Kdfd3b5gnrUfcbn8qd
rYvH+x/T4bvQG2djyTh8bvFbz0s2M8Neap2NK6ELxYY26O3FPGC+96zsn76/
qtQG3ORCa0S33PRMd9Z+R2v/2Om3fQBc4LOD9IyH/C/WiKXpxE3O9xkxrpdz
7EO2By6+QWzGvXI6Zl/yGbzjUPT4kLUXu2q55jrXZwfBGfU4wRqxtLzySX6H
3DzdIVvmIZ2PWWO7U4BtuHN8xq4/FDOfbO3g6pKD57PdOc2eFmtmlOOT1og/
8DHcv/uMuO4dynGGNfY11jYuvM/7jL3qUOQ409rBddN58EyfvSybUZOzrWGv
L8HITT7rM+KiQ3H1F60d3GBt6HrQ75D/NOMhf8Ua8SYf553hM+J8vZw5y79m
jXuzj+FOL/kb791/KFJcbO3gR9aBu/7z+63ce2aU4lvWiD/2cd1pPiP+4R06
+kpr7FunM5zfTyT89lBsfZW1F7cRs2H6/TTI7TNqcq014m0lW/NJfof834eC
8XprBz/1wXiyzw7+61A0udnawc98jHiSzw5um1GT26wRfz4dy+K3jfy45Ghn
lOOn1ti/8PHgid6wN814jL+yxvmlD7fi4V073eFZDubfbrdG/JWPt4rfkXH1
oZzwHdawvy45UD77eG/Y78x4wnOtcX7j46PjvK2/9Q5OmFvcY414uw8K99Op
9px8ScnYMzrzXmsHd0znow/47KX4/xv8lFhoDfs/JaC4id+nbi84FGQPWzuw
y5PrLb9DPtfvkH/i/i5cyQ4es3bwex+rvc9nB2f77cDTZLk14p0+LvP7oMDn
DkWTldYOSl9P4yG/x2cHZ8x4yJXWiHf52O8YnxFPm+6QS6y9wRp73nTOO9IM
Zs/8H59uB36a1Fl7uccH41E+O/jYjJq0WiP+0cd5fodsf+nKTJq0W2Pf50Pw
cJ+xP1wy9ozpHrZ2YHc6rgf9XiQrfpjWT46ENeKDPoc822dE+3/Evi3BlLWD
+T4enOWzg6P8Dnm6TO+2drDAB2jpdwLy3uEzajJkjfiQPn+2bTp3JO/Q35EO
I9ag7n8YtA7Ta3r9DmirtW3Zu/4f71ByCw==\
\>"]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["B Proofs", "Section",
 CellChangeTimes->{3.6887863223409605`*^9}],

Cell[CellGroupData[{

Cell["\<\
This part tries to see what is the correct form of 2 dimensional complex \
vector space...\
\>", "Subsection",
 CellChangeTimes->{{3.688786391370909*^9, 3.6887864564896336`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   SubscriptBox["a", "0"], "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(", 
   RowBox[{"\[Rho]", "=", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{
      SubsuperscriptBox["\[Sum]", 
       RowBox[{"j", "=", "0"}], "3"], 
      RowBox[{
       SubscriptBox["a", "j"], 
       RowBox[{"PauliMatrix", "[", "j", "]"}]}]}]}]}], ")"}], "//", 
  "MatrixForm"}]}], "Input",
 CellChangeTimes->{{3.6886837960288477`*^9, 3.6886838704691057`*^9}, {
  3.6886839255242543`*^9, 3.68868392894445*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SubscriptBox["a", "3"]}], ")"}]}], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["a", "1"], "-", 
         RowBox[{"\[ImaginaryI]", " ", 
          SubscriptBox["a", "2"]}]}], ")"}]}]},
     {
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["a", "1"], "+", 
         RowBox[{"\[ImaginaryI]", " ", 
          SubscriptBox["a", "2"]}]}], ")"}]}], 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         SubscriptBox["a", "3"]}], ")"}]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.688683851740034*^9, 3.688683870963134*^9}, 
   3.688683933789727*^9, 3.68878632932436*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Eigensystem", "[", 
  TagBox[
   RowBox[{"(", "\[NoBreak]", GridBox[{
      {
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SubscriptBox["a", "3"]}], ")"}]}], 
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["a", "1"], "-", 
          RowBox[{"\[ImaginaryI]", " ", 
           SubscriptBox["a", "2"]}]}], ")"}]}]},
      {
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["a", "1"], "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SubscriptBox["a", "2"]}]}], ")"}]}], 
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"1", "-", 
          SubscriptBox["a", "3"]}], ")"}]}]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
        "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.7]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
   Function[BoxForm`e$, 
    MatrixForm[BoxForm`e$]]], "]"}]], "Input",
 CellChangeTimes->{{3.688685381443528*^9, 3.6886854014506726`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "-", 
        SqrtBox[
         RowBox[{
          SubsuperscriptBox["a", "1", "2"], "+", 
          SubsuperscriptBox["a", "2", "2"], "+", 
          SubsuperscriptBox["a", "3", "2"]}]]}], ")"}]}], ",", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SqrtBox[
         RowBox[{
          SubsuperscriptBox["a", "1", "2"], "+", 
          SubsuperscriptBox["a", "2", "2"], "+", 
          SubsuperscriptBox["a", "3", "2"]}]]}], ")"}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"-", 
           SubscriptBox["a", "3"]}], "+", 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SubsuperscriptBox["a", "3", "2"]}]]}], 
         RowBox[{
          SubscriptBox["a", "1"], "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SubscriptBox["a", "2"]}]}]]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        FractionBox[
         RowBox[{
          RowBox[{"-", 
           SubscriptBox["a", "3"]}], "-", 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SubsuperscriptBox["a", "3", "2"]}]]}], 
         RowBox[{
          SubscriptBox["a", "1"], "+", 
          RowBox[{"\[ImaginaryI]", " ", 
           SubscriptBox["a", "2"]}]}]]}], ",", "1"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.688685402012705*^9, 3.688786329360362*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SubscriptBox["a", "3"], "-", 
        SqrtBox[
         RowBox[{
          SubsuperscriptBox["a", "1", "2"], "+", 
          SubsuperscriptBox["a", "2", "2"], "+", 
          SubsuperscriptBox["a", "3", "2"]}]]}], ",", 
       RowBox[{
        SubscriptBox["a", "1"], "+", 
        RowBox[{"\[ImaginaryI]", " ", 
         SubscriptBox["a", "2"]}]}]}], "}"}], "\[Conjugate]"}], ".", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SubscriptBox["a", "3"], "+", 
       SqrtBox[
        RowBox[{
         SubsuperscriptBox["a", "1", "2"], "+", 
         SubsuperscriptBox["a", "2", "2"], "+", 
         SubsuperscriptBox["a", "3", "2"]}]]}], ",", 
      RowBox[{
       SubscriptBox["a", "1"], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        SubscriptBox["a", "2"]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox[
      SubscriptBox["a", "1"], "2"], "+", 
     SuperscriptBox[
      SubscriptBox["a", "2"], "2"], "+", 
     SuperscriptBox[
      SubscriptBox["a", "3"], "2"]}], "\[LessEqual]", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6886870976976924`*^9, 3.688687124179207*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.688687107859274*^9, 3.68868712474924*^9}, 
   3.688786329400365*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"Normalize", "/@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         SubscriptBox["a", "3"], "-", 
         SqrtBox[
          RowBox[{
           SubsuperscriptBox["a", "1", "2"], "+", 
           SubsuperscriptBox["a", "2", "2"], "+", 
           SubsuperscriptBox["a", "3", "2"]}]]}], ",", 
        RowBox[{
         SubscriptBox["a", "1"], "+", 
         RowBox[{"\[ImaginaryI]", " ", 
          SubscriptBox["a", "2"]}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         SubscriptBox["a", "3"], "+", 
         SqrtBox[
          RowBox[{
           SubsuperscriptBox["a", "1", "2"], "+", 
           SubsuperscriptBox["a", "2", "2"], "+", 
           SubsuperscriptBox["a", "3", "2"]}]]}], ",", 
        RowBox[{
         SubscriptBox["a", "1"], "+", 
         RowBox[{"\[ImaginaryI]", " ", 
          SubscriptBox["a", "2"]}]}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox[
      SubscriptBox["a", "1"], "2"], "+", 
     SuperscriptBox[
      SubscriptBox["a", "2"], "2"], "+", 
     SuperscriptBox[
      SubscriptBox["a", "3"], "2"]}], "\[LessEqual]", "1"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6886868150615263`*^9, 3.688686837831829*^9}, {
  3.6886868763050294`*^9, 3.688687015622998*^9}, {3.6886871921800966`*^9, 
  3.6886872245599484`*^9}, {3.6886874164789257`*^9, 3.688687479621537*^9}, {
  3.6886875795992556`*^9, 3.6886875988913593`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["a", "3"], "-", 
       SqrtBox[
        RowBox[{
         SubsuperscriptBox["a", "1", "2"], "+", 
         SubsuperscriptBox["a", "2", "2"], "+", 
         SubsuperscriptBox["a", "3", "2"]}]]}], 
      SqrtBox[
       RowBox[{
        SubsuperscriptBox["a", "1", "2"], "+", 
        SubsuperscriptBox["a", "2", "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["a", "3"], "-", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], ",", 
     FractionBox[
      RowBox[{
       SubscriptBox["a", "1"], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        SubscriptBox["a", "2"]}]}], 
      SqrtBox[
       RowBox[{
        SubsuperscriptBox["a", "1", "2"], "+", 
        SubsuperscriptBox["a", "2", "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["a", "3"], "-", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox["a", "3"], "+", 
       SqrtBox[
        RowBox[{
         SubsuperscriptBox["a", "1", "2"], "+", 
         SubsuperscriptBox["a", "2", "2"], "+", 
         SubsuperscriptBox["a", "3", "2"]}]]}], 
      SqrtBox[
       RowBox[{
        SubsuperscriptBox["a", "1", "2"], "+", 
        SubsuperscriptBox["a", "2", "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["a", "3"], "+", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], ",", 
     FractionBox[
      RowBox[{
       SubscriptBox["a", "1"], "+", 
       RowBox[{"\[ImaginaryI]", " ", 
        SubscriptBox["a", "2"]}]}], 
      SqrtBox[
       RowBox[{
        SubsuperscriptBox["a", "1", "2"], "+", 
        SubsuperscriptBox["a", "2", "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["a", "3"], "+", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6886868959591537`*^9, {3.6886869392866316`*^9, 3.6886869669792156`*^9}, 
   3.6886870328189816`*^9, {3.6886872151814117`*^9, 3.688687226598065*^9}, 
   3.6886874861489105`*^9, {3.688687589559825*^9, 3.6886875997634087`*^9}, 
   3.6887863305204287`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FullSimplify", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          FractionBox[
           RowBox[{
            SubscriptBox["a", "3"], "-", 
            SqrtBox[
             RowBox[{
              SubsuperscriptBox["a", "1", "2"], "+", 
              SubsuperscriptBox["a", "2", "2"], "+", 
              SubsuperscriptBox["a", "3", "2"]}]]}], 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                SubscriptBox["a", "3"], "-", 
                SqrtBox[
                 RowBox[{
                  SubsuperscriptBox["a", "1", "2"], "+", 
                  SubsuperscriptBox["a", "2", "2"], "+", 
                  SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], 
          FractionBox[
           RowBox[{
            SubscriptBox["a", "3"], "+", 
            SqrtBox[
             RowBox[{
              SubsuperscriptBox["a", "1", "2"], "+", 
              SubsuperscriptBox["a", "2", "2"], "+", 
              SubsuperscriptBox["a", "3", "2"]}]]}], 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                SubscriptBox["a", "3"], "+", 
                SqrtBox[
                 RowBox[{
                  SubsuperscriptBox["a", "1", "2"], "+", 
                  SubsuperscriptBox["a", "2", "2"], "+", 
                  SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]},
         {
          FractionBox[
           RowBox[{
            SubscriptBox["a", "1"], "+", 
            RowBox[{"\[ImaginaryI]", " ", 
             SubscriptBox["a", "2"]}]}], 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                SubscriptBox["a", "3"], "-", 
                SqrtBox[
                 RowBox[{
                  SubsuperscriptBox["a", "1", "2"], "+", 
                  SubsuperscriptBox["a", "2", "2"], "+", 
                  SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], 
          FractionBox[
           RowBox[{
            SubscriptBox["a", "1"], "+", 
            RowBox[{"\[ImaginaryI]", " ", 
             SubscriptBox["a", "2"]}]}], 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{
                SubscriptBox["a", "3"], "+", 
                SqrtBox[
                 RowBox[{
                  SubsuperscriptBox["a", "1", "2"], "+", 
                  SubsuperscriptBox["a", "2", "2"], "+", 
                  SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]}
        }], "\[NoBreak]", ")"}], "\[ConjugateTranspose]"}], ".", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "+", 
             SubscriptBox["a", "3"]}], ")"}]}], 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             SubscriptBox["a", "1"], "-", 
             RowBox[{"\[ImaginaryI]", " ", 
              SubscriptBox["a", "2"]}]}], ")"}]}]},
         {
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{
             SubscriptBox["a", "1"], "+", 
             RowBox[{"\[ImaginaryI]", " ", 
              SubscriptBox["a", "2"]}]}], ")"}]}], 
          RowBox[{
           FractionBox["1", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             SubscriptBox["a", "3"]}], ")"}]}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ".", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {
         FractionBox[
          RowBox[{
           SubscriptBox["a", "3"], "-", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               SubscriptBox["a", "3"], "-", 
               SqrtBox[
                RowBox[{
                 SubsuperscriptBox["a", "1", "2"], "+", 
                 SubsuperscriptBox["a", "2", "2"], "+", 
                 SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], 
         FractionBox[
          RowBox[{
           SubscriptBox["a", "3"], "+", 
           SqrtBox[
            RowBox[{
             SubsuperscriptBox["a", "1", "2"], "+", 
             SubsuperscriptBox["a", "2", "2"], "+", 
             SubsuperscriptBox["a", "3", "2"]}]]}], 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               SubscriptBox["a", "3"], "+", 
               SqrtBox[
                RowBox[{
                 SubsuperscriptBox["a", "1", "2"], "+", 
                 SubsuperscriptBox["a", "2", "2"], "+", 
                 SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]},
        {
         FractionBox[
          RowBox[{
           SubscriptBox["a", "1"], "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            SubscriptBox["a", "2"]}]}], 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               SubscriptBox["a", "3"], "-", 
               SqrtBox[
                RowBox[{
                 SubsuperscriptBox["a", "1", "2"], "+", 
                 SubsuperscriptBox["a", "2", "2"], "+", 
                 SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]], 
         FractionBox[
          RowBox[{
           SubscriptBox["a", "1"], "+", 
           RowBox[{"\[ImaginaryI]", " ", 
            SubscriptBox["a", "2"]}]}], 
          SqrtBox[
           RowBox[{
            SubsuperscriptBox["a", "1", "2"], "+", 
            SubsuperscriptBox["a", "2", "2"], "+", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{
               SubscriptBox["a", "3"], "+", 
               SqrtBox[
                RowBox[{
                 SubsuperscriptBox["a", "1", "2"], "+", 
                 SubsuperscriptBox["a", "2", "2"], "+", 
                 SubsuperscriptBox["a", "3", "2"]}]]}], ")"}], "2"]}]]]}
       }], "\[NoBreak]", ")"}]}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox[
       SubscriptBox["a", "1"], "2"], "+", 
      SuperscriptBox[
       SubscriptBox["a", "2"], "2"], "+", 
      SuperscriptBox[
       SubscriptBox["a", "3"], "2"]}], "\[LessEqual]", "1"}]}], "]"}], "//", 
  "MatrixForm"}]], "Input",
 CellChangeTimes->{
  3.6886875701737165`*^9, {3.688687614244237*^9, 3.688687717495143*^9}, {
   3.6886878205720387`*^9, 3.6886878368549695`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", 
         SqrtBox[
          RowBox[{
           SubsuperscriptBox["a", "1", "2"], "+", 
           SubsuperscriptBox["a", "2", "2"], "+", 
           SubsuperscriptBox["a", "3", "2"]}]]}], ")"}]}], "0"},
     {"0", 
      RowBox[{
       FractionBox["1", "2"], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         SqrtBox[
          RowBox[{
           SubsuperscriptBox["a", "1", "2"], "+", 
           SubsuperscriptBox["a", "2", "2"], "+", 
           SubsuperscriptBox["a", "3", "2"]}]]}], ")"}]}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.688687720262301*^9, 3.6886878389640903`*^9, 
  3.688786331930509*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "This part tries to see how to get a quadratic form for each vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[VerticalSeparator]", "\[Psi]"}], "\[RightAngleBracket]"}], 
    "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalC]S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for given maximum ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"M", "\[Equal]", 
         RowBox[{
          SubscriptBox["max", 
           RowBox[{
            RowBox[{
             RowBox[{"\[LeftBracketingBar]", "\[Phi]"}], 
             "\[RightAngleBracket]"}], "\[Element]", 
            SuperscriptBox["\[DoubleStruckCapitalC]S", "2"]}]], 
          RowBox[{"f", "(", 
           RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}]}], 
        "\[RightAngleBracket]"}], ")"}], "\[Equal]", 
      RowBox[{"f", "(", 
       RowBox[{"\[VerticalSeparator]", "0"}]}]}], "\[RightAngleBracket]"}], 
    ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and minimum ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"m", "\[Equal]", 
         RowBox[{
          SubscriptBox["min", 
           RowBox[{
            RowBox[{
             RowBox[{"\[LeftBracketingBar]", "\[Phi]"}], 
             "\[RightAngleBracket]"}], "\[Element]", 
            SuperscriptBox["\[DoubleStruckCapitalC]S", "2"]}]], 
          RowBox[{"f", "(", 
           RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}]}], 
        "\[RightAngleBracket]"}], ")"}], "\[Equal]", 
      RowBox[{"f", "(", 
       RowBox[{"\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}]}]}], "\[RightAngleBracket]"}], ")"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsection",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQXXvvtdXZ6teODltmuoHorKrUQBB9ZYl9OIhmu+EY
C6LXnSyIB9EVIVlpIFqIfXkliFZxZBY9B6SrNV5IguhnE+WcnwJpCYc0FxDd
WyIZBKLfdPxJBdF+17dlI9NePFr1IPripNo+EK26p3ISiNZiqpgKotOXXZgJ
omvU+WaB6M8Bk+Yj00Izg5eA6HUtoUtBtGW320oQfc1I+zyIbhapuwyiy/qd
roDoF384FJ8B6cQD/7RA9GOZY3og+obEDzD970W8DTLttfXk2udA2qeJbwOI
BgAHCaoi
  "]],

Cell[TextData[{
 "In order to apply Theorem 7, we need the inner product of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", "0"}], "\[RightAngleBracket]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftBracketingBar]", 
     OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is a real number. If ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"0", "\[VerticalSeparator]", 
      OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], "\[Equal]", "0"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"0", "\[VerticalSeparator]", 
      OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], "\[Element]", 
    "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "; otherwise, since ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"f", "(", 
          RowBox[{"\[VerticalSeparator]", 
           OverscriptBox["0", "_"]}]}], "\[RightAngleBracket]"}], ")"}], 
       "\[Equal]", 
       RowBox[{"f", "(", 
        RowBox[{"\[VerticalSeparator]", 
         OverscriptBox["0", "_"]}]}]}], "\[RightAngleBracket]"}], 
     FractionBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"0", "\[VerticalSeparator]", 
         OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
       "\[RightBracketingBar]"}], 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"0", "\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}]]}], ")"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"0", "\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
      FractionBox[
       RowBox[{"\[LeftBracketingBar]", 
        RowBox[{"\[LeftAngleBracket]", 
         RowBox[{"0", "\[VerticalSeparator]", 
          OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
        "\[RightBracketingBar]"}], 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"0", "\[VerticalSeparator]", 
         OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}]]}], "\[Equal]", 
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"0", "\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
      "\[RightBracketingBar]"}]}], "\[Element]", "\[DoubleStruckCapitalR]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"\[VerticalSeparator]", 
       OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
     FractionBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"0", "\[VerticalSeparator]", 
         OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
       "\[RightBracketingBar]"}], 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"0", "\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}]]}], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalC]S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", we can pick ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[VerticalSeparator]", 
      OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
    FractionBox[
     RowBox[{"\[LeftBracketingBar]", 
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"0", "\[VerticalSeparator]", 
        OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], 
      "\[RightBracketingBar]"}], 
     RowBox[{"\[LeftAngleBracket]", 
      RowBox[{"0", "\[VerticalSeparator]", 
       OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}]]}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " as the ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", 
     OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Therefore, we can always pick ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", "0"}], "\[RightAngleBracket]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", 
     OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " as the maximum and minimum point with a real inner product."
}], "Text",
 CellChangeTimes->{
  3.688837565855135*^9, {3.6888405865734196`*^9, 3.6888406194034653`*^9}}],

Cell[TextData[{
 "Then, pick ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[VerticalSeparator]", "\[Psi]"}], "\[RightAngleBracket]"}], 
    "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalC]S", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"0", 
      RowBox[{"\[LeftBracketingBar]", "\[Psi]"}]}], "\[RightAngleBracket]"}], 
    "\[Element]", "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      OverscriptBox["0", "_"], 
      RowBox[{"\[LeftBracketingBar]", "\[Psi]"}]}], "\[RightAngleBracket]"}], 
    "\[Element]", "\[DoubleStruckCapitalR]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Then, the real vector space spanned by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", "0"}], "\[RightAngleBracket]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", 
     OverscriptBox["0", "_"]}], "\[RightAngleBracket]"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", "\[Psi]"}], "\[RightAngleBracket]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " has a real inner product. Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              SubsuperscriptBox["S", "\[Psi]", "2"], "=", 
              RowBox[{"{", 
               RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}], 
             "\[RightAngleBracket]"}], "\[Element]", 
            RowBox[{"span", 
             RowBox[{"{", 
              RowBox[{"\[VerticalSeparator]", "0"}]}]}]}], 
           "\[RightAngleBracket]"}], ",", 
          RowBox[{"\[VerticalSeparator]", 
           OverscriptBox["0", "_"]}]}], "\[RightAngleBracket]"}], ",", 
        RowBox[{"\[VerticalSeparator]", "\[Psi]"}]}], 
       "\[RightAngleBracket]"}], "}"}], "\[VerticalSeparator]", 
     RowBox[{
      RowBox[{"\[LeftAngleBracket]", 
       RowBox[{"\[Phi]", 
        RowBox[{"\[LeftBracketingBar]", "\[Phi]"}]}], 
       "\[RightAngleBracket]"}], "\[Equal]", "1"}]}], "}"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "."
}], "Text",
 CellChangeTimes->{{3.6888375797451544`*^9, 3.6888376131892104`*^9}, {
  3.688837844399534*^9, 3.688837960771702*^9}, {3.688838027881796*^9, 
  3.688838063761846*^9}, {3.688838128951937*^9, 3.688838239592092*^9}, {
  3.688838418252342*^9, 3.6888384729224186`*^9}, {3.6888406245034723`*^9, 
  3.6888406545435147`*^9}, {3.6888417290650187`*^9, 3.68884173000502*^9}}],

Cell[TextData[{
 "The problem is still how to pick ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[VerticalSeparator]", 
      SubscriptBox["2", "\[Psi]"]}], "\[RightAngleBracket]"}], "\[Element]", 
    SubsuperscriptBox["S", "\[Psi]", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". As before, we need to find a point ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"\[VerticalSeparator]", 
          SubscriptBox["2", "\[Psi]"]}], "\[RightAngleBracket]"}], 
        "\[Element]", 
        RowBox[{
         SubsuperscriptBox["S", "\[Psi]", "2"], "\[Intersection]", 
         RowBox[{"span", 
          RowBox[{"{", 
           RowBox[{"\[VerticalSeparator]", "0"}]}]}]}]}], 
       "\[RightAngleBracket]"}], ",", 
      RowBox[{"\[VerticalSeparator]", 
       OverscriptBox["0", "_"]}]}], "\[RightAngleBracket]"}], "}"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"0", 
      RowBox[{"\[LeftBracketingBar]", 
       SubscriptBox["2", "\[Psi]"]}]}], "\[RightAngleBracket]"}], "\[Equal]", 
    "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Although there are two opposite points satisfying the given condition, it \
is fine becasue they give the same quadratic form. (And we cannot define \
cross product from the inner prodcut right?) Then, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"\[VerticalSeparator]", 
      SubscriptBox["1", "\[Psi]"]}], "\[RightAngleBracket]"}], "\[Element]", 
    SubsuperscriptBox["S", "\[Psi]", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{"0", 
      RowBox[{"\[LeftBracketingBar]", 
       SubscriptBox["1", "\[Psi]"]}]}], "\[RightAngleBracket]"}], "\[Equal]", 
    RowBox[{"\[LeftAngleBracket]", 
     RowBox[{
      SubscriptBox["2", "\[Psi]"], 
      RowBox[{"\[LeftBracketingBar]", 
       SubscriptBox["1", "\[Psi]"]}]}], "\[RightAngleBracket]"}], "\[Equal]", 
    "0"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Now we have a quadratic form ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["Q", "\[Psi]"], "(", 
       RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}], "\[RightAngleBracket]"}],
      ")"}], "=", 
    RowBox[{
     RowBox[{"M", 
      SuperscriptBox[
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{"0", 
         RowBox[{"\[LeftBracketingBar]", "\[Phi]"}]}], 
        "\[RightAngleBracket]"}], "2"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"W", "-", "M", "-", "m"}], ")"}], 
      SuperscriptBox[
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{
         SubscriptBox["1", "\[Psi]"], 
         RowBox[{"\[LeftBracketingBar]", "\[Phi]"}]}], 
        "\[RightAngleBracket]"}], "2"]}], "+", 
     RowBox[{"m", 
      SuperscriptBox[
       RowBox[{"\[LeftAngleBracket]", 
        RowBox[{
         SubscriptBox["2", "\[Psi]"], 
         RowBox[{"\[LeftBracketingBar]", "\[Phi]"}]}], 
        "\[RightAngleBracket]"}], "2"]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", and more ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Delta]", "(", 
    RowBox[{"\[Eta]", ",", 
     SubscriptBox["W", "\[CapitalDelta]"], ",", 
     SubscriptBox["\[Omega]", "f"]}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["f", "\[Psi]"], "'"}], 
            RowBox[{"(", 
             RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}], 
           "\[RightAngleBracket]"}], ")"}], "=", 
         RowBox[{"f", "(", 
          RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}], 
        "\[RightAngleBracket]"}], ")"}], "-", 
      RowBox[{
       SubscriptBox["Q", "\[Psi]"], "(", 
       RowBox[{"\[VerticalSeparator]", "\[Phi]"}]}]}], 
     "\[RightAngleBracket]"}], ")"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ", and finally ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"\[LeftBracketingBar]", 
           RowBox[{"f", "(", 
            RowBox[{"\[VerticalSeparator]", "\[Psi]"}]}]}], 
          "\[RightAngleBracket]"}], ")"}], "-", 
        RowBox[{
         SubscriptBox["Q", "\[Psi]"], "(", 
         RowBox[{"\[VerticalSeparator]", "\[Psi]"}]}]}], 
       "\[RightAngleBracket]"}], ")"}], "\[RightBracketingBar]"}], 
    "\[LessEqual]", 
    RowBox[{
     RowBox[{"27", 
      RowBox[{"\[Delta]", "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["W", "r"], "-", 
         SubscriptBox["W", "l"]}], ",", 
        RowBox[{
         SubscriptBox["W", "r"], "-", 
         SubscriptBox["W", "l"]}], ",", 
        SubscriptBox["\[Omega]", "f"]}], ")"}]}], "+", 
     RowBox[{"27", 
      RowBox[{"\[Delta]", "(", 
       RowBox[{
        RowBox[{
         SubscriptBox["W", "r"], "-", 
         SubscriptBox["W", "l"]}], ",", 
        RowBox[{
         SubscriptBox["W", "r"], "-", 
         SubscriptBox["W", "l"]}], ",", 
        SubscriptBox["\[Omega]", 
         RowBox[{
          SubscriptBox["f", "\[Psi]"], "'"}]]}], ")"}]}], "+", 
     RowBox[{"18", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["W", "r"], "-", 
        SubscriptBox["W", "l"]}], ")"}]}]}]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". The problem is now ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["Q", "\[Psi]"], " "}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " is depened on ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[VerticalSeparator]", "\[Psi]"}], "\[RightAngleBracket]"}], 
   TraditionalForm]],
  FormatType->"TraditionalForm"],
 "! What are those ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Q", "\[Psi]"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "? Can we find a ",
 Cell[BoxData[
  FormBox["Q", TraditionalForm]],
  FormatType->"TraditionalForm"],
 " which is close to all these ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["Q", "\[Psi]"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 "?"
}], "Text",
 CellChangeTimes->{{3.6888379806517296`*^9, 3.6888380082317677`*^9}, {
   3.688838522472488*^9, 3.688838524452491*^9}, {3.688838779712848*^9, 
   3.688838915939052*^9}, {3.6888389570391097`*^9, 3.68883905692925*^9}, {
   3.688839308019601*^9, 3.6888394449358063`*^9}, {3.688840170126828*^9, 
   3.688840191196858*^9}, 3.6888402583509555`*^9, {3.6888406638535275`*^9, 
   3.6888406862235594`*^9}, {3.688840927103896*^9, 3.688841000463999*^9}, {
   3.68884103686405*^9, 3.688841141944197*^9}, {3.688841262594366*^9, 
   3.6888413064444275`*^9}, {3.6888413502244887`*^9, 
   3.6888415451047616`*^9}, {3.6888415800548105`*^9, 
   3.6888416551849155`*^9}, {3.688841734965027*^9, 3.6888419050852656`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Alpha]", "0"], ",", 
       SubscriptBox["\[Alpha]", "1"], ",", 
       SubscriptBox["\[Alpha]", "2"]}], "}"}], "\[Cross]", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Beta]", "0"], ",", 
       SubscriptBox["\[Beta]", "1"], ",", 
       SubscriptBox["\[Beta]", "2"]}], "}"}]}], ")"}], ".", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Alpha]", "0"], ",", 
     SubscriptBox["\[Alpha]", "1"], ",", 
     SubscriptBox["\[Alpha]", "2"]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Alpha]", "0"], ",", 
       SubscriptBox["\[Alpha]", "1"], ",", 
       SubscriptBox["\[Alpha]", "2"]}], "}"}], "\[Cross]", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Beta]", "0"], ",", 
       SubscriptBox["\[Beta]", "1"], ",", 
       SubscriptBox["\[Beta]", "2"]}], "}"}]}], ")"}], ".", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], ",", 
     SubscriptBox["\[Beta]", "1"], ",", 
     SubscriptBox["\[Beta]", "2"]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{
  3.688788675327544*^9, {3.6887887110565877`*^9, 3.688788799715658*^9}, {
   3.688788881441333*^9, 3.68878888470852*^9}, {3.6888246455599384`*^9, 
   3.6888246459799395`*^9}, {3.6888256166753073`*^9, 
   3.6888256974354205`*^9}, {3.6888274904779305`*^9, 3.688827497329944*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.6887886758765755`*^9, {3.688788779686513*^9, 3.6887888013997545`*^9}, 
   3.6887888861276007`*^9, 3.6888246468499403`*^9, 3.688825699465423*^9, {
   3.6888274926279335`*^9, 3.688827498429946*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.6887886758765755`*^9, {3.688788779686513*^9, 3.6887888013997545`*^9}, 
   3.6887888861276007`*^9, 3.6888246468499403`*^9, 3.688825699465423*^9, {
   3.6888274926279335`*^9, 3.6888274984399457`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"cross", "[", 
   RowBox[{"a_", ",", "b_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"B", ".", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inverse", "[", "B", "]"}], ".", "a"}], ")"}], "\[Cross]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inverse", "[", "B", "]"}], ".", "b"}], ")"}]}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"cross", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"cross", "[", 
    RowBox[{"a_", ",", "b_", ",", "B_"}], "]"}], 
   RowBox[{
    RowBox[{"\[Sigma]", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[Alpha]", "0"], ",", 
        SubscriptBox["\[Alpha]", "1"], ",", 
        SubscriptBox["\[Alpha]", "2"]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["\[Beta]", "0"], ",", 
        SubscriptBox["\[Beta]", "1"], ",", 
        SubscriptBox["\[Beta]", "2"]}], "}"}]}], "]"}], ".", 
    RowBox[{"{", 
     RowBox[{
      SubscriptBox["\[Alpha]", "0"], ",", 
      SubscriptBox["\[Alpha]", "1"], ",", 
      SubscriptBox["\[Alpha]", "2"]}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6888275014299498`*^9, 3.688827568720044*^9}, {
  3.68882764804216*^9, 3.6888276569521723`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.688827562860036*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Sigma]", "[", 
   RowBox[{"\[Psi]_", ",", "\[Phi]_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Norm", "[", "\[Phi]", "]"}], 
   RowBox[{"Normalize", "[", 
    RowBox[{"\[Psi]", "\[Cross]", "\[Phi]"}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"\[Sigma]", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Alpha]", "0"], ",", 
       SubscriptBox["\[Alpha]", "1"], ",", 
       SubscriptBox["\[Alpha]", "2"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Beta]", "0"], ",", 
       SubscriptBox["\[Beta]", "1"], ",", 
       SubscriptBox["\[Beta]", "2"]}], "}"}]}], "]"}], ".", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Alpha]", "0"], ",", 
     SubscriptBox["\[Alpha]", "1"], ",", 
     SubscriptBox["\[Alpha]", "2"]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{
   RowBox[{"\[Sigma]", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Alpha]", "0"], ",", 
       SubscriptBox["\[Alpha]", "1"], ",", 
       SubscriptBox["\[Alpha]", "2"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       SubscriptBox["\[Beta]", "0"], ",", 
       SubscriptBox["\[Beta]", "1"], ",", 
       SubscriptBox["\[Beta]", "2"]}], "}"}]}], "]"}], ".", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Beta]", "0"], ",", 
     SubscriptBox["\[Beta]", "1"], ",", 
     SubscriptBox["\[Beta]", "2"]}], "}"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.688788230519102*^9, 3.6887882968978987`*^9}, {
  3.6887884708278475`*^9, 3.688788554879655*^9}, {3.688788655990438*^9, 
  3.6887886728274007`*^9}, {3.688825311452875*^9, 3.688825319904892*^9}}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.688788477249214*^9, 3.688788498418425*^9}, 
   3.6887885570887814`*^9, 3.688788678334716*^9, 3.688825322414895*^9}],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{{3.688788477249214*^9, 3.688788498418425*^9}, 
   3.6887885570887814`*^9, 3.688788678334716*^9, 3.6888253224248953`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"\[Sigma]", "[", 
   RowBox[{"\[Psi]_", ",", "\[Phi]_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"B", ".", 
   RowBox[{"Normalize", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inverse", "[", "B", "]"}], ".", "\[Psi]"}], ")"}], "\[Cross]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Inverse", "[", "B", "]"}], ".", "\[Phi]"}], ")"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"FullSimplify", "[", 
  RowBox[{"\[Sigma]", "[", 
   RowBox[{"\[Psi]_", ",", "\[Phi]_", ",", "B_"}], "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6888250112004504`*^9, 3.688825024600469*^9}, {
   3.688825120290603*^9, 3.6888251269606123`*^9}, {3.6888251621206617`*^9, 
   3.6888251669206686`*^9}, {3.6888252078707256`*^9, 
   3.6888252579028006`*^9}, {3.6888253580449452`*^9, 3.6888254052950115`*^9}, 
   3.688825436895056*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{944, 810},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingPageRange->{Automatic, Automatic},
FrontEndVersion->"10.3 for Microsoft Windows (64-bit) (October 9, 2015)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 120, 1, 70, "Section"],
Cell[703, 25, 161, 4, 30, "Text"],
Cell[CellGroupData[{
Cell[889, 33, 4933, 133, 232, "Input"],
Cell[5825, 168, 3668, 73, 536, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9530, 246, 778, 20, 72, "Input"],
Cell[10311, 268, 847, 16, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11195, 289, 4577, 104, 234, "Input"],
Cell[15775, 395, 11210, 188, 447, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[27022, 588, 2102, 49, 112, "Input"],
Cell[29127, 639, 8242, 135, 447, "Output"]
}, Open  ]],
Cell[37384, 777, 8113, 181, 292, "Input"],
Cell[CellGroupData[{
Cell[45522, 962, 280, 7, 31, "Input"],
Cell[45805, 971, 448, 8, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[46290, 984, 5330, 120, 159, "Input"],
Cell[51623, 1106, 4153, 80, 500, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55813, 1191, 901, 27, 46, "Input"],
Cell[56717, 1220, 13968, 393, 208, "Print"],
Cell[70688, 1615, 153810, 2541, 406, 45943, 773, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[224547, 4162, 71, 1, 70, "Section"],
Cell[CellGroupData[{
Cell[224643, 4167, 188, 4, 49, "Subsection"],
Cell[CellGroupData[{
Cell[224856, 4175, 553, 17, 67, "Input"],
Cell[225412, 4194, 1398, 43, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[226847, 4242, 1430, 43, 62, "Input"],
Cell[228280, 4287, 1830, 58, 59, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[230147, 4350, 1249, 39, 44, "Input"],
Cell[231399, 4391, 119, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[231555, 4398, 1526, 43, 73, "Input"],
Cell[233084, 4443, 3031, 91, 170, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[236152, 4539, 8078, 222, 307, "Input"],
Cell[244233, 4763, 1262, 37, 88, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[245544, 4806, 2201, 65, 82, "Subsection"],
Cell[247748, 4873, 4888, 146, 102, "Text"],
Cell[252639, 5021, 2942, 88, 61, "Text"],
Cell[255584, 5111, 7194, 221, 153, "Text"],
Cell[CellGroupData[{
Cell[262803, 5336, 1550, 43, 52, "Input"],
Cell[264356, 5381, 249, 4, 31, "Output"],
Cell[264608, 5387, 251, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[264896, 5396, 1707, 52, 72, "Input"],
Cell[266606, 5450, 125, 3, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[266768, 5458, 1739, 49, 72, "Input"],
Cell[268510, 5509, 166, 2, 31, "Output"],
Cell[268679, 5513, 168, 2, 31, "Output"]
}, Open  ]],
Cell[268862, 5518, 877, 21, 52, "Input"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
